// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trippath.proto

/*
Package trippath is a generated protocol buffer package.

It is generated from these files:
	trippath.proto

It has these top-level messages:
	TripPath
*/
package trippath

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import valhalla_odin "github.com/united-drivers/valhalla/pb/tripcommon"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// LatLng from public import tripcommon.proto
type LatLng valhalla_odin.LatLng

func (m *LatLng) Reset()          { (*valhalla_odin.LatLng)(m).Reset() }
func (m *LatLng) String() string  { return (*valhalla_odin.LatLng)(m).String() }
func (*LatLng) ProtoMessage()     {}
func (m *LatLng) GetLat() float32 { return (*valhalla_odin.LatLng)(m).GetLat() }
func (m *LatLng) GetLng() float32 { return (*valhalla_odin.LatLng)(m).GetLng() }

// BoundingBox from public import tripcommon.proto
type BoundingBox valhalla_odin.BoundingBox

func (m *BoundingBox) Reset()            { (*valhalla_odin.BoundingBox)(m).Reset() }
func (m *BoundingBox) String() string    { return (*valhalla_odin.BoundingBox)(m).String() }
func (*BoundingBox) ProtoMessage()       {}
func (m *BoundingBox) GetMinLl() *LatLng { return (*LatLng)((*valhalla_odin.BoundingBox)(m).GetMinLl()) }
func (m *BoundingBox) GetMaxLl() *LatLng { return (*LatLng)((*valhalla_odin.BoundingBox)(m).GetMaxLl()) }

// Location from public import tripcommon.proto
const Default_Location_Type = valhalla_odin.Default_Location_Type
const Default_Location_HeadingTolerance = valhalla_odin.Default_Location_HeadingTolerance
const Default_Location_NodeSnapTolerance = valhalla_odin.Default_Location_NodeSnapTolerance
const Default_Location_MinimumReachability = valhalla_odin.Default_Location_MinimumReachability
const Default_Location_Radius = valhalla_odin.Default_Location_Radius
const Default_Location_Time = valhalla_odin.Default_Location_Time
const Default_Location_RankCandidates = valhalla_odin.Default_Location_RankCandidates

type Location valhalla_odin.Location

func (m *Location) Reset()         { (*valhalla_odin.Location)(m).Reset() }
func (m *Location) String() string { return (*valhalla_odin.Location)(m).String() }
func (*Location) ProtoMessage()    {}
func (m *Location) GetLl() *LatLng { return (*LatLng)((*valhalla_odin.Location)(m).GetLl()) }
func (m *Location) GetType() Location_Type {
	return (Location_Type)((*valhalla_odin.Location)(m).GetType())
}
func (m *Location) GetHeading() uint32    { return (*valhalla_odin.Location)(m).GetHeading() }
func (m *Location) GetName() string       { return (*valhalla_odin.Location)(m).GetName() }
func (m *Location) GetStreet() string     { return (*valhalla_odin.Location)(m).GetStreet() }
func (m *Location) GetCity() string       { return (*valhalla_odin.Location)(m).GetCity() }
func (m *Location) GetState() string      { return (*valhalla_odin.Location)(m).GetState() }
func (m *Location) GetPostalCode() string { return (*valhalla_odin.Location)(m).GetPostalCode() }
func (m *Location) GetCountry() string    { return (*valhalla_odin.Location)(m).GetCountry() }
func (m *Location) GetPhone() string      { return (*valhalla_odin.Location)(m).GetPhone() }
func (m *Location) GetUrl() string        { return (*valhalla_odin.Location)(m).GetUrl() }
func (m *Location) GetDateTime() string   { return (*valhalla_odin.Location)(m).GetDateTime() }
func (m *Location) GetSideOfStreet() Location_SideOfStreet {
	return (Location_SideOfStreet)((*valhalla_odin.Location)(m).GetSideOfStreet())
}
func (m *Location) GetHeadingTolerance() uint32 {
	return (*valhalla_odin.Location)(m).GetHeadingTolerance()
}
func (m *Location) GetNodeSnapTolerance() uint32 {
	return (*valhalla_odin.Location)(m).GetNodeSnapTolerance()
}
func (m *Location) GetWayId() uint64 { return (*valhalla_odin.Location)(m).GetWayId() }
func (m *Location) GetMinimumReachability() uint32 {
	return (*valhalla_odin.Location)(m).GetMinimumReachability()
}
func (m *Location) GetRadius() uint32       { return (*valhalla_odin.Location)(m).GetRadius() }
func (m *Location) GetAccuracy() uint32     { return (*valhalla_odin.Location)(m).GetAccuracy() }
func (m *Location) GetTime() float64        { return (*valhalla_odin.Location)(m).GetTime() }
func (m *Location) GetRankCandidates() bool { return (*valhalla_odin.Location)(m).GetRankCandidates() }
func (m *Location) GetPathEdges() []*Location_PathEdge {
	o := (*valhalla_odin.Location)(m).GetPathEdges()
	if o == nil {
		return nil
	}
	s := make([]*Location_PathEdge, len(o))
	for i, x := range o {
		s[i] = (*Location_PathEdge)(x)
	}
	return s
}
func (m *Location) GetFilteredEdges() []*Location_PathEdge {
	o := (*valhalla_odin.Location)(m).GetFilteredEdges()
	if o == nil {
		return nil
	}
	s := make([]*Location_PathEdge, len(o))
	for i, x := range o {
		s[i] = (*Location_PathEdge)(x)
	}
	return s
}
func (m *Location) GetOriginalIndex() uint32 { return (*valhalla_odin.Location)(m).GetOriginalIndex() }
func (m *Location) GetProjectedLl() *LatLng {
	return (*LatLng)((*valhalla_odin.Location)(m).GetProjectedLl())
}

// PathEdge from public import tripcommon.proto
type Location_PathEdge valhalla_odin.Location_PathEdge

func (m *Location_PathEdge) Reset()         { (*valhalla_odin.Location_PathEdge)(m).Reset() }
func (m *Location_PathEdge) String() string { return (*valhalla_odin.Location_PathEdge)(m).String() }
func (*Location_PathEdge) ProtoMessage()    {}
func (m *Location_PathEdge) GetGraphId() uint64 {
	return (*valhalla_odin.Location_PathEdge)(m).GetGraphId()
}
func (m *Location_PathEdge) GetPercentAlong() float32 {
	return (*valhalla_odin.Location_PathEdge)(m).GetPercentAlong()
}
func (m *Location_PathEdge) GetLl() *LatLng {
	return (*LatLng)((*valhalla_odin.Location_PathEdge)(m).GetLl())
}
func (m *Location_PathEdge) GetSideOfStreet() Location_SideOfStreet {
	return (Location_SideOfStreet)((*valhalla_odin.Location_PathEdge)(m).GetSideOfStreet())
}
func (m *Location_PathEdge) GetDistance() float32 {
	return (*valhalla_odin.Location_PathEdge)(m).GetDistance()
}
func (m *Location_PathEdge) GetMinimumReachability() int32 {
	return (*valhalla_odin.Location_PathEdge)(m).GetMinimumReachability()
}
func (m *Location_PathEdge) GetBeginNode() bool {
	return (*valhalla_odin.Location_PathEdge)(m).GetBeginNode()
}
func (m *Location_PathEdge) GetEndNode() bool {
	return (*valhalla_odin.Location_PathEdge)(m).GetEndNode()
}
func (m *Location_PathEdge) GetNames() []string {
	return (*valhalla_odin.Location_PathEdge)(m).GetNames()
}

// TransitEgressInfo from public import tripcommon.proto
type TransitEgressInfo valhalla_odin.TransitEgressInfo

func (m *TransitEgressInfo) Reset()         { (*valhalla_odin.TransitEgressInfo)(m).Reset() }
func (m *TransitEgressInfo) String() string { return (*valhalla_odin.TransitEgressInfo)(m).String() }
func (*TransitEgressInfo) ProtoMessage()    {}
func (m *TransitEgressInfo) GetOnestopId() string {
	return (*valhalla_odin.TransitEgressInfo)(m).GetOnestopId()
}
func (m *TransitEgressInfo) GetName() string { return (*valhalla_odin.TransitEgressInfo)(m).GetName() }
func (m *TransitEgressInfo) GetLl() *LatLng {
	return (*LatLng)((*valhalla_odin.TransitEgressInfo)(m).GetLl())
}

// TransitStationInfo from public import tripcommon.proto
type TransitStationInfo valhalla_odin.TransitStationInfo

func (m *TransitStationInfo) Reset()         { (*valhalla_odin.TransitStationInfo)(m).Reset() }
func (m *TransitStationInfo) String() string { return (*valhalla_odin.TransitStationInfo)(m).String() }
func (*TransitStationInfo) ProtoMessage()    {}
func (m *TransitStationInfo) GetOnestopId() string {
	return (*valhalla_odin.TransitStationInfo)(m).GetOnestopId()
}
func (m *TransitStationInfo) GetName() string { return (*valhalla_odin.TransitStationInfo)(m).GetName() }
func (m *TransitStationInfo) GetLl() *LatLng {
	return (*LatLng)((*valhalla_odin.TransitStationInfo)(m).GetLl())
}

// TransitPlatformInfo from public import tripcommon.proto
type TransitPlatformInfo valhalla_odin.TransitPlatformInfo

func (m *TransitPlatformInfo) Reset()         { (*valhalla_odin.TransitPlatformInfo)(m).Reset() }
func (m *TransitPlatformInfo) String() string { return (*valhalla_odin.TransitPlatformInfo)(m).String() }
func (*TransitPlatformInfo) ProtoMessage()    {}
func (m *TransitPlatformInfo) GetType() TransitPlatformInfo_Type {
	return (TransitPlatformInfo_Type)((*valhalla_odin.TransitPlatformInfo)(m).GetType())
}
func (m *TransitPlatformInfo) GetOnestopId() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetOnestopId()
}
func (m *TransitPlatformInfo) GetName() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetName()
}
func (m *TransitPlatformInfo) GetArrivalDateTime() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetArrivalDateTime()
}
func (m *TransitPlatformInfo) GetDepartureDateTime() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetDepartureDateTime()
}
func (m *TransitPlatformInfo) GetAssumedSchedule() bool {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetAssumedSchedule()
}
func (m *TransitPlatformInfo) GetLl() *LatLng {
	return (*LatLng)((*valhalla_odin.TransitPlatformInfo)(m).GetLl())
}
func (m *TransitPlatformInfo) GetStationOnestopId() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetStationOnestopId()
}
func (m *TransitPlatformInfo) GetStationName() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetStationName()
}

// Type from public import tripcommon.proto
type Location_Type valhalla_odin.Location_Type

var Location_Type_name = valhalla_odin.Location_Type_name
var Location_Type_value = valhalla_odin.Location_Type_value

func (x Location_Type) String() string { return (valhalla_odin.Location_Type)(x).String() }
func (x Location_Type) Enum() *Location_Type {
	return (*Location_Type)((valhalla_odin.Location_Type)(x).Enum())
}
func (x *Location_Type) UnmarshalJSON(data []byte) error {
	return (*valhalla_odin.Location_Type)(x).UnmarshalJSON(data)
}

const Location_kBreak = Location_Type(valhalla_odin.Location_kBreak)
const Location_kThrough = Location_Type(valhalla_odin.Location_kThrough)

// SideOfStreet from public import tripcommon.proto
type Location_SideOfStreet valhalla_odin.Location_SideOfStreet

var Location_SideOfStreet_name = valhalla_odin.Location_SideOfStreet_name
var Location_SideOfStreet_value = valhalla_odin.Location_SideOfStreet_value

func (x Location_SideOfStreet) String() string {
	return (valhalla_odin.Location_SideOfStreet)(x).String()
}
func (x Location_SideOfStreet) Enum() *Location_SideOfStreet {
	return (*Location_SideOfStreet)((valhalla_odin.Location_SideOfStreet)(x).Enum())
}
func (x *Location_SideOfStreet) UnmarshalJSON(data []byte) error {
	return (*valhalla_odin.Location_SideOfStreet)(x).UnmarshalJSON(data)
}

const Location_kNone = Location_SideOfStreet(valhalla_odin.Location_kNone)
const Location_kLeft = Location_SideOfStreet(valhalla_odin.Location_kLeft)
const Location_kRight = Location_SideOfStreet(valhalla_odin.Location_kRight)

// Type from public import tripcommon.proto
type TransitPlatformInfo_Type valhalla_odin.TransitPlatformInfo_Type

var TransitPlatformInfo_Type_name = valhalla_odin.TransitPlatformInfo_Type_name
var TransitPlatformInfo_Type_value = valhalla_odin.TransitPlatformInfo_Type_value

func (x TransitPlatformInfo_Type) String() string {
	return (valhalla_odin.TransitPlatformInfo_Type)(x).String()
}
func (x TransitPlatformInfo_Type) Enum() *TransitPlatformInfo_Type {
	return (*TransitPlatformInfo_Type)((valhalla_odin.TransitPlatformInfo_Type)(x).Enum())
}
func (x *TransitPlatformInfo_Type) UnmarshalJSON(data []byte) error {
	return (*valhalla_odin.TransitPlatformInfo_Type)(x).UnmarshalJSON(data)
}

const TransitPlatformInfo_kStop = TransitPlatformInfo_Type(valhalla_odin.TransitPlatformInfo_kStop)
const TransitPlatformInfo_kStation = TransitPlatformInfo_Type(valhalla_odin.TransitPlatformInfo_kStation)

type TripPath_Traversability int32

const (
	TripPath_kNone     TripPath_Traversability = 0
	TripPath_kForward  TripPath_Traversability = 1
	TripPath_kBackward TripPath_Traversability = 2
	TripPath_kBoth     TripPath_Traversability = 3
)

var TripPath_Traversability_name = map[int32]string{
	0: "kNone",
	1: "kForward",
	2: "kBackward",
	3: "kBoth",
}
var TripPath_Traversability_value = map[string]int32{
	"kNone":     0,
	"kForward":  1,
	"kBackward": 2,
	"kBoth":     3,
}

func (x TripPath_Traversability) Enum() *TripPath_Traversability {
	p := new(TripPath_Traversability)
	*p = x
	return p
}
func (x TripPath_Traversability) String() string {
	return proto.EnumName(TripPath_Traversability_name, int32(x))
}
func (x *TripPath_Traversability) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_Traversability_value, data, "TripPath_Traversability")
	if err != nil {
		return err
	}
	*x = TripPath_Traversability(value)
	return nil
}
func (TripPath_Traversability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 0}
}

type TripPath_RoadClass int32

const (
	TripPath_kMotorway     TripPath_RoadClass = 0
	TripPath_kTrunk        TripPath_RoadClass = 1
	TripPath_kPrimary      TripPath_RoadClass = 2
	TripPath_kSecondary    TripPath_RoadClass = 3
	TripPath_kTertiary     TripPath_RoadClass = 4
	TripPath_kUnclassified TripPath_RoadClass = 5
	TripPath_kResidential  TripPath_RoadClass = 6
	TripPath_kServiceOther TripPath_RoadClass = 7
)

var TripPath_RoadClass_name = map[int32]string{
	0: "kMotorway",
	1: "kTrunk",
	2: "kPrimary",
	3: "kSecondary",
	4: "kTertiary",
	5: "kUnclassified",
	6: "kResidential",
	7: "kServiceOther",
}
var TripPath_RoadClass_value = map[string]int32{
	"kMotorway":     0,
	"kTrunk":        1,
	"kPrimary":      2,
	"kSecondary":    3,
	"kTertiary":     4,
	"kUnclassified": 5,
	"kResidential":  6,
	"kServiceOther": 7,
}

func (x TripPath_RoadClass) Enum() *TripPath_RoadClass {
	p := new(TripPath_RoadClass)
	*p = x
	return p
}
func (x TripPath_RoadClass) String() string {
	return proto.EnumName(TripPath_RoadClass_name, int32(x))
}
func (x *TripPath_RoadClass) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_RoadClass_value, data, "TripPath_RoadClass")
	if err != nil {
		return err
	}
	*x = TripPath_RoadClass(value)
	return nil
}
func (TripPath_RoadClass) EnumDescriptor() ([]byte, []int) { return fileDescriptorTrippath, []int{0, 1} }

type TripPath_Use int32

const (
	TripPath_kRoadUse            TripPath_Use = 0
	TripPath_kRampUse            TripPath_Use = 1
	TripPath_kTurnChannelUse     TripPath_Use = 2
	TripPath_kTrackUse           TripPath_Use = 3
	TripPath_kDrivewayUse        TripPath_Use = 4
	TripPath_kAlleyUse           TripPath_Use = 5
	TripPath_kParkingAisleUse    TripPath_Use = 6
	TripPath_kEmergencyAccessUse TripPath_Use = 7
	TripPath_kDriveThruUse       TripPath_Use = 8
	TripPath_kCuldesacUse        TripPath_Use = 9
	// Bicycle specific uses
	TripPath_kCyclewayUse     TripPath_Use = 20
	TripPath_kMountainBikeUse TripPath_Use = 21
	TripPath_kSidewalkUse     TripPath_Use = 24
	// Pedestrian specific uses
	TripPath_kFootwayUse    TripPath_Use = 25
	TripPath_kStepsUse      TripPath_Use = 26
	TripPath_kPathUse       TripPath_Use = 27
	TripPath_kPedestrianUse TripPath_Use = 28
	TripPath_kBridlewayUse  TripPath_Use = 29
	// Other...
	TripPath_kOtherUse TripPath_Use = 40
	// Ferry and rail ferry
	TripPath_kFerryUse     TripPath_Use = 41
	TripPath_kRailFerryUse TripPath_Use = 42
	// Transit specific uses. Must be last in the list
	TripPath_kRailUse               TripPath_Use = 50
	TripPath_kBusUse                TripPath_Use = 51
	TripPath_kEgressConnectionUse   TripPath_Use = 52
	TripPath_kPlatformConnectionUse TripPath_Use = 53
	TripPath_kTransitConnectionUse  TripPath_Use = 54
)

var TripPath_Use_name = map[int32]string{
	0:  "kRoadUse",
	1:  "kRampUse",
	2:  "kTurnChannelUse",
	3:  "kTrackUse",
	4:  "kDrivewayUse",
	5:  "kAlleyUse",
	6:  "kParkingAisleUse",
	7:  "kEmergencyAccessUse",
	8:  "kDriveThruUse",
	9:  "kCuldesacUse",
	20: "kCyclewayUse",
	21: "kMountainBikeUse",
	24: "kSidewalkUse",
	25: "kFootwayUse",
	26: "kStepsUse",
	27: "kPathUse",
	28: "kPedestrianUse",
	29: "kBridlewayUse",
	40: "kOtherUse",
	41: "kFerryUse",
	42: "kRailFerryUse",
	50: "kRailUse",
	51: "kBusUse",
	52: "kEgressConnectionUse",
	53: "kPlatformConnectionUse",
	54: "kTransitConnectionUse",
}
var TripPath_Use_value = map[string]int32{
	"kRoadUse":               0,
	"kRampUse":               1,
	"kTurnChannelUse":        2,
	"kTrackUse":              3,
	"kDrivewayUse":           4,
	"kAlleyUse":              5,
	"kParkingAisleUse":       6,
	"kEmergencyAccessUse":    7,
	"kDriveThruUse":          8,
	"kCuldesacUse":           9,
	"kCyclewayUse":           20,
	"kMountainBikeUse":       21,
	"kSidewalkUse":           24,
	"kFootwayUse":            25,
	"kStepsUse":              26,
	"kPathUse":               27,
	"kPedestrianUse":         28,
	"kBridlewayUse":          29,
	"kOtherUse":              40,
	"kFerryUse":              41,
	"kRailFerryUse":          42,
	"kRailUse":               50,
	"kBusUse":                51,
	"kEgressConnectionUse":   52,
	"kPlatformConnectionUse": 53,
	"kTransitConnectionUse":  54,
}

func (x TripPath_Use) Enum() *TripPath_Use {
	p := new(TripPath_Use)
	*p = x
	return p
}
func (x TripPath_Use) String() string {
	return proto.EnumName(TripPath_Use_name, int32(x))
}
func (x *TripPath_Use) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_Use_value, data, "TripPath_Use")
	if err != nil {
		return err
	}
	*x = TripPath_Use(value)
	return nil
}
func (TripPath_Use) EnumDescriptor() ([]byte, []int) { return fileDescriptorTrippath, []int{0, 2} }

type TripPath_Surface int32

const (
	TripPath_kPavedSmooth TripPath_Surface = 0
	TripPath_kPaved       TripPath_Surface = 1
	TripPath_kPavedRough  TripPath_Surface = 2
	TripPath_kCompacted   TripPath_Surface = 3
	TripPath_kDirt        TripPath_Surface = 4
	TripPath_kGravel      TripPath_Surface = 5
	TripPath_kPath        TripPath_Surface = 6
	TripPath_kImpassable  TripPath_Surface = 7
)

var TripPath_Surface_name = map[int32]string{
	0: "kPavedSmooth",
	1: "kPaved",
	2: "kPavedRough",
	3: "kCompacted",
	4: "kDirt",
	5: "kGravel",
	6: "kPath",
	7: "kImpassable",
}
var TripPath_Surface_value = map[string]int32{
	"kPavedSmooth": 0,
	"kPaved":       1,
	"kPavedRough":  2,
	"kCompacted":   3,
	"kDirt":        4,
	"kGravel":      5,
	"kPath":        6,
	"kImpassable":  7,
}

func (x TripPath_Surface) Enum() *TripPath_Surface {
	p := new(TripPath_Surface)
	*p = x
	return p
}
func (x TripPath_Surface) String() string {
	return proto.EnumName(TripPath_Surface_name, int32(x))
}
func (x *TripPath_Surface) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_Surface_value, data, "TripPath_Surface")
	if err != nil {
		return err
	}
	*x = TripPath_Surface(value)
	return nil
}
func (TripPath_Surface) EnumDescriptor() ([]byte, []int) { return fileDescriptorTrippath, []int{0, 3} }

type TripPath_TravelMode int32

const (
	TripPath_kDrive      TripPath_TravelMode = 0
	TripPath_kPedestrian TripPath_TravelMode = 1
	TripPath_kBicycle    TripPath_TravelMode = 2
	TripPath_kTransit    TripPath_TravelMode = 3
)

var TripPath_TravelMode_name = map[int32]string{
	0: "kDrive",
	1: "kPedestrian",
	2: "kBicycle",
	3: "kTransit",
}
var TripPath_TravelMode_value = map[string]int32{
	"kDrive":      0,
	"kPedestrian": 1,
	"kBicycle":    2,
	"kTransit":    3,
}

func (x TripPath_TravelMode) Enum() *TripPath_TravelMode {
	p := new(TripPath_TravelMode)
	*p = x
	return p
}
func (x TripPath_TravelMode) String() string {
	return proto.EnumName(TripPath_TravelMode_name, int32(x))
}
func (x *TripPath_TravelMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_TravelMode_value, data, "TripPath_TravelMode")
	if err != nil {
		return err
	}
	*x = TripPath_TravelMode(value)
	return nil
}
func (TripPath_TravelMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 4}
}

// TODO: review and update as needed
type TripPath_VehicleType int32

const (
	TripPath_kCar            TripPath_VehicleType = 0
	TripPath_kMotorcycle     TripPath_VehicleType = 1
	TripPath_kAutoBus        TripPath_VehicleType = 2
	TripPath_kTractorTrailer TripPath_VehicleType = 3
	TripPath_kMotorScooter   TripPath_VehicleType = 4
)

var TripPath_VehicleType_name = map[int32]string{
	0: "kCar",
	1: "kMotorcycle",
	2: "kAutoBus",
	3: "kTractorTrailer",
	4: "kMotorScooter",
}
var TripPath_VehicleType_value = map[string]int32{
	"kCar":            0,
	"kMotorcycle":     1,
	"kAutoBus":        2,
	"kTractorTrailer": 3,
	"kMotorScooter":   4,
}

func (x TripPath_VehicleType) Enum() *TripPath_VehicleType {
	p := new(TripPath_VehicleType)
	*p = x
	return p
}
func (x TripPath_VehicleType) String() string {
	return proto.EnumName(TripPath_VehicleType_name, int32(x))
}
func (x *TripPath_VehicleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_VehicleType_value, data, "TripPath_VehicleType")
	if err != nil {
		return err
	}
	*x = TripPath_VehicleType(value)
	return nil
}
func (TripPath_VehicleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 5}
}

// TODO: review and update as needed
type TripPath_PedestrianType int32

const (
	TripPath_kFoot       TripPath_PedestrianType = 0
	TripPath_kWheelchair TripPath_PedestrianType = 1
	TripPath_kSegway     TripPath_PedestrianType = 2
)

var TripPath_PedestrianType_name = map[int32]string{
	0: "kFoot",
	1: "kWheelchair",
	2: "kSegway",
}
var TripPath_PedestrianType_value = map[string]int32{
	"kFoot":       0,
	"kWheelchair": 1,
	"kSegway":     2,
}

func (x TripPath_PedestrianType) Enum() *TripPath_PedestrianType {
	p := new(TripPath_PedestrianType)
	*p = x
	return p
}
func (x TripPath_PedestrianType) String() string {
	return proto.EnumName(TripPath_PedestrianType_name, int32(x))
}
func (x *TripPath_PedestrianType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_PedestrianType_value, data, "TripPath_PedestrianType")
	if err != nil {
		return err
	}
	*x = TripPath_PedestrianType(value)
	return nil
}
func (TripPath_PedestrianType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 6}
}

type TripPath_BicycleType int32

const (
	TripPath_kRoad     TripPath_BicycleType = 0
	TripPath_kCross    TripPath_BicycleType = 1
	TripPath_kHybrid   TripPath_BicycleType = 2
	TripPath_kMountain TripPath_BicycleType = 3
)

var TripPath_BicycleType_name = map[int32]string{
	0: "kRoad",
	1: "kCross",
	2: "kHybrid",
	3: "kMountain",
}
var TripPath_BicycleType_value = map[string]int32{
	"kRoad":     0,
	"kCross":    1,
	"kHybrid":   2,
	"kMountain": 3,
}

func (x TripPath_BicycleType) Enum() *TripPath_BicycleType {
	p := new(TripPath_BicycleType)
	*p = x
	return p
}
func (x TripPath_BicycleType) String() string {
	return proto.EnumName(TripPath_BicycleType_name, int32(x))
}
func (x *TripPath_BicycleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_BicycleType_value, data, "TripPath_BicycleType")
	if err != nil {
		return err
	}
	*x = TripPath_BicycleType(value)
	return nil
}
func (TripPath_BicycleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 7}
}

type TripPath_TransitType int32

const (
	TripPath_kTram      TripPath_TransitType = 0
	TripPath_kMetro     TripPath_TransitType = 1
	TripPath_kRail      TripPath_TransitType = 2
	TripPath_kBus       TripPath_TransitType = 3
	TripPath_kFerry     TripPath_TransitType = 4
	TripPath_kCableCar  TripPath_TransitType = 5
	TripPath_kGondola   TripPath_TransitType = 6
	TripPath_kFunicular TripPath_TransitType = 7
)

var TripPath_TransitType_name = map[int32]string{
	0: "kTram",
	1: "kMetro",
	2: "kRail",
	3: "kBus",
	4: "kFerry",
	5: "kCableCar",
	6: "kGondola",
	7: "kFunicular",
}
var TripPath_TransitType_value = map[string]int32{
	"kTram":      0,
	"kMetro":     1,
	"kRail":      2,
	"kBus":       3,
	"kFerry":     4,
	"kCableCar":  5,
	"kGondola":   6,
	"kFunicular": 7,
}

func (x TripPath_TransitType) Enum() *TripPath_TransitType {
	p := new(TripPath_TransitType)
	*p = x
	return p
}
func (x TripPath_TransitType) String() string {
	return proto.EnumName(TripPath_TransitType_name, int32(x))
}
func (x *TripPath_TransitType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_TransitType_value, data, "TripPath_TransitType")
	if err != nil {
		return err
	}
	*x = TripPath_TransitType(value)
	return nil
}
func (TripPath_TransitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 8}
}

type TripPath_CycleLane int32

const (
	TripPath_kNoCycleLane TripPath_CycleLane = 0
	TripPath_kShared      TripPath_CycleLane = 1
	TripPath_kDedicated   TripPath_CycleLane = 2
	TripPath_kSeparated   TripPath_CycleLane = 3
)

var TripPath_CycleLane_name = map[int32]string{
	0: "kNoCycleLane",
	1: "kShared",
	2: "kDedicated",
	3: "kSeparated",
}
var TripPath_CycleLane_value = map[string]int32{
	"kNoCycleLane": 0,
	"kShared":      1,
	"kDedicated":   2,
	"kSeparated":   3,
}

func (x TripPath_CycleLane) Enum() *TripPath_CycleLane {
	p := new(TripPath_CycleLane)
	*p = x
	return p
}
func (x TripPath_CycleLane) String() string {
	return proto.EnumName(TripPath_CycleLane_name, int32(x))
}
func (x *TripPath_CycleLane) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_CycleLane_value, data, "TripPath_CycleLane")
	if err != nil {
		return err
	}
	*x = TripPath_CycleLane(value)
	return nil
}
func (TripPath_CycleLane) EnumDescriptor() ([]byte, []int) { return fileDescriptorTrippath, []int{0, 9} }

type TripPath_Sidewalk int32

const (
	TripPath_kNoSidewalk TripPath_Sidewalk = 0
	TripPath_kLeft       TripPath_Sidewalk = 1
	TripPath_kRight      TripPath_Sidewalk = 2
	TripPath_kBothSides  TripPath_Sidewalk = 3
)

var TripPath_Sidewalk_name = map[int32]string{
	0: "kNoSidewalk",
	1: "kLeft",
	2: "kRight",
	3: "kBothSides",
}
var TripPath_Sidewalk_value = map[string]int32{
	"kNoSidewalk": 0,
	"kLeft":       1,
	"kRight":      2,
	"kBothSides":  3,
}

func (x TripPath_Sidewalk) Enum() *TripPath_Sidewalk {
	p := new(TripPath_Sidewalk)
	*p = x
	return p
}
func (x TripPath_Sidewalk) String() string {
	return proto.EnumName(TripPath_Sidewalk_name, int32(x))
}
func (x *TripPath_Sidewalk) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_Sidewalk_value, data, "TripPath_Sidewalk")
	if err != nil {
		return err
	}
	*x = TripPath_Sidewalk(value)
	return nil
}
func (TripPath_Sidewalk) EnumDescriptor() ([]byte, []int) { return fileDescriptorTrippath, []int{0, 10} }

type TripPath_Node_Type int32

const (
	TripPath_Node_kStreetIntersection TripPath_Node_Type = 0
	TripPath_Node_kGate               TripPath_Node_Type = 1
	TripPath_Node_kBollard            TripPath_Node_Type = 2
	TripPath_Node_kTollBooth          TripPath_Node_Type = 3
	// TODO - for now there is no differentiation between bus and rail stops...
	TripPath_Node_kTransitEgress    TripPath_Node_Type = 4
	TripPath_Node_kTransitStation   TripPath_Node_Type = 5
	TripPath_Node_kTransitPlatform  TripPath_Node_Type = 6
	TripPath_Node_kBikeShare        TripPath_Node_Type = 7
	TripPath_Node_kParking          TripPath_Node_Type = 8
	TripPath_Node_kMotorwayJunction TripPath_Node_Type = 9
	TripPath_Node_kBorderControl    TripPath_Node_Type = 10
)

var TripPath_Node_Type_name = map[int32]string{
	0:  "kStreetIntersection",
	1:  "kGate",
	2:  "kBollard",
	3:  "kTollBooth",
	4:  "kTransitEgress",
	5:  "kTransitStation",
	6:  "kTransitPlatform",
	7:  "kBikeShare",
	8:  "kParking",
	9:  "kMotorwayJunction",
	10: "kBorderControl",
}
var TripPath_Node_Type_value = map[string]int32{
	"kStreetIntersection": 0,
	"kGate":               1,
	"kBollard":            2,
	"kTollBooth":          3,
	"kTransitEgress":      4,
	"kTransitStation":     5,
	"kTransitPlatform":    6,
	"kBikeShare":          7,
	"kParking":            8,
	"kMotorwayJunction":   9,
	"kBorderControl":      10,
}

func (x TripPath_Node_Type) Enum() *TripPath_Node_Type {
	p := new(TripPath_Node_Type)
	*p = x
	return p
}
func (x TripPath_Node_Type) String() string {
	return proto.EnumName(TripPath_Node_Type_name, int32(x))
}
func (x *TripPath_Node_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripPath_Node_Type_value, data, "TripPath_Node_Type")
	if err != nil {
		return err
	}
	*x = TripPath_Node_Type(value)
	return nil
}
func (TripPath_Node_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 6, 0}
}

type TripPath struct {
	OsmChangeset     *uint64                    `protobuf:"varint,1,opt,name=osm_changeset,json=osmChangeset" json:"osm_changeset,omitempty"`
	TripId           *uint64                    `protobuf:"varint,2,opt,name=trip_id,json=tripId" json:"trip_id,omitempty"`
	LegId            *uint32                    `protobuf:"varint,3,opt,name=leg_id,json=legId" json:"leg_id,omitempty"`
	LegCount         *uint32                    `protobuf:"varint,4,opt,name=leg_count,json=legCount" json:"leg_count,omitempty"`
	Location         []*valhalla_odin.Location  `protobuf:"bytes,5,rep,name=location" json:"location,omitempty"`
	Node             []*TripPath_Node           `protobuf:"bytes,6,rep,name=node" json:"node,omitempty"`
	Admin            []*TripPath_Admin          `protobuf:"bytes,7,rep,name=admin" json:"admin,omitempty"`
	Shape            *string                    `protobuf:"bytes,8,opt,name=shape" json:"shape,omitempty"`
	Bbox             *valhalla_odin.BoundingBox `protobuf:"bytes,9,opt,name=bbox" json:"bbox,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *TripPath) Reset()                    { *m = TripPath{} }
func (m *TripPath) String() string            { return proto.CompactTextString(m) }
func (*TripPath) ProtoMessage()               {}
func (*TripPath) Descriptor() ([]byte, []int) { return fileDescriptorTrippath, []int{0} }

func (m *TripPath) GetOsmChangeset() uint64 {
	if m != nil && m.OsmChangeset != nil {
		return *m.OsmChangeset
	}
	return 0
}

func (m *TripPath) GetTripId() uint64 {
	if m != nil && m.TripId != nil {
		return *m.TripId
	}
	return 0
}

func (m *TripPath) GetLegId() uint32 {
	if m != nil && m.LegId != nil {
		return *m.LegId
	}
	return 0
}

func (m *TripPath) GetLegCount() uint32 {
	if m != nil && m.LegCount != nil {
		return *m.LegCount
	}
	return 0
}

func (m *TripPath) GetLocation() []*valhalla_odin.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TripPath) GetNode() []*TripPath_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *TripPath) GetAdmin() []*TripPath_Admin {
	if m != nil {
		return m.Admin
	}
	return nil
}

func (m *TripPath) GetShape() string {
	if m != nil && m.Shape != nil {
		return *m.Shape
	}
	return ""
}

func (m *TripPath) GetBbox() *valhalla_odin.BoundingBox {
	if m != nil {
		return m.Bbox
	}
	return nil
}

type TripPath_Sign struct {
	ExitNumber       []string `protobuf:"bytes,1,rep,name=exit_number,json=exitNumber" json:"exit_number,omitempty"`
	ExitBranch       []string `protobuf:"bytes,2,rep,name=exit_branch,json=exitBranch" json:"exit_branch,omitempty"`
	ExitToward       []string `protobuf:"bytes,3,rep,name=exit_toward,json=exitToward" json:"exit_toward,omitempty"`
	ExitName         []string `protobuf:"bytes,4,rep,name=exit_name,json=exitName" json:"exit_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TripPath_Sign) Reset()                    { *m = TripPath_Sign{} }
func (m *TripPath_Sign) String() string            { return proto.CompactTextString(m) }
func (*TripPath_Sign) ProtoMessage()               {}
func (*TripPath_Sign) Descriptor() ([]byte, []int) { return fileDescriptorTrippath, []int{0, 0} }

func (m *TripPath_Sign) GetExitNumber() []string {
	if m != nil {
		return m.ExitNumber
	}
	return nil
}

func (m *TripPath_Sign) GetExitBranch() []string {
	if m != nil {
		return m.ExitBranch
	}
	return nil
}

func (m *TripPath_Sign) GetExitToward() []string {
	if m != nil {
		return m.ExitToward
	}
	return nil
}

func (m *TripPath_Sign) GetExitName() []string {
	if m != nil {
		return m.ExitName
	}
	return nil
}

type TripPath_TransitRouteInfo struct {
	OnestopId         *string `protobuf:"bytes,1,opt,name=onestop_id,json=onestopId" json:"onestop_id,omitempty"`
	BlockId           *uint32 `protobuf:"varint,2,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
	TripId            *uint32 `protobuf:"varint,3,opt,name=trip_id,json=tripId" json:"trip_id,omitempty"`
	ShortName         *string `protobuf:"bytes,4,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
	LongName          *string `protobuf:"bytes,5,opt,name=long_name,json=longName" json:"long_name,omitempty"`
	Headsign          *string `protobuf:"bytes,6,opt,name=headsign" json:"headsign,omitempty"`
	Color             *uint32 `protobuf:"varint,7,opt,name=color" json:"color,omitempty"`
	TextColor         *uint32 `protobuf:"varint,8,opt,name=text_color,json=textColor" json:"text_color,omitempty"`
	Description       *string `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
	OperatorOnestopId *string `protobuf:"bytes,10,opt,name=operator_onestop_id,json=operatorOnestopId" json:"operator_onestop_id,omitempty"`
	OperatorName      *string `protobuf:"bytes,11,opt,name=operator_name,json=operatorName" json:"operator_name,omitempty"`
	OperatorUrl       *string `protobuf:"bytes,12,opt,name=operator_url,json=operatorUrl" json:"operator_url,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *TripPath_TransitRouteInfo) Reset()         { *m = TripPath_TransitRouteInfo{} }
func (m *TripPath_TransitRouteInfo) String() string { return proto.CompactTextString(m) }
func (*TripPath_TransitRouteInfo) ProtoMessage()    {}
func (*TripPath_TransitRouteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 1}
}

func (m *TripPath_TransitRouteInfo) GetOnestopId() string {
	if m != nil && m.OnestopId != nil {
		return *m.OnestopId
	}
	return ""
}

func (m *TripPath_TransitRouteInfo) GetBlockId() uint32 {
	if m != nil && m.BlockId != nil {
		return *m.BlockId
	}
	return 0
}

func (m *TripPath_TransitRouteInfo) GetTripId() uint32 {
	if m != nil && m.TripId != nil {
		return *m.TripId
	}
	return 0
}

func (m *TripPath_TransitRouteInfo) GetShortName() string {
	if m != nil && m.ShortName != nil {
		return *m.ShortName
	}
	return ""
}

func (m *TripPath_TransitRouteInfo) GetLongName() string {
	if m != nil && m.LongName != nil {
		return *m.LongName
	}
	return ""
}

func (m *TripPath_TransitRouteInfo) GetHeadsign() string {
	if m != nil && m.Headsign != nil {
		return *m.Headsign
	}
	return ""
}

func (m *TripPath_TransitRouteInfo) GetColor() uint32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *TripPath_TransitRouteInfo) GetTextColor() uint32 {
	if m != nil && m.TextColor != nil {
		return *m.TextColor
	}
	return 0
}

func (m *TripPath_TransitRouteInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *TripPath_TransitRouteInfo) GetOperatorOnestopId() string {
	if m != nil && m.OperatorOnestopId != nil {
		return *m.OperatorOnestopId
	}
	return ""
}

func (m *TripPath_TransitRouteInfo) GetOperatorName() string {
	if m != nil && m.OperatorName != nil {
		return *m.OperatorName
	}
	return ""
}

func (m *TripPath_TransitRouteInfo) GetOperatorUrl() string {
	if m != nil && m.OperatorUrl != nil {
		return *m.OperatorUrl
	}
	return ""
}

type TripPath_LaneConnectivity struct {
	FromWayId        *uint64 `protobuf:"varint,1,opt,name=from_way_id,json=fromWayId" json:"from_way_id,omitempty"`
	FromLanes        *string `protobuf:"bytes,2,opt,name=from_lanes,json=fromLanes" json:"from_lanes,omitempty"`
	ToLanes          *string `protobuf:"bytes,3,opt,name=to_lanes,json=toLanes" json:"to_lanes,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TripPath_LaneConnectivity) Reset()         { *m = TripPath_LaneConnectivity{} }
func (m *TripPath_LaneConnectivity) String() string { return proto.CompactTextString(m) }
func (*TripPath_LaneConnectivity) ProtoMessage()    {}
func (*TripPath_LaneConnectivity) Descriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 2}
}

func (m *TripPath_LaneConnectivity) GetFromWayId() uint64 {
	if m != nil && m.FromWayId != nil {
		return *m.FromWayId
	}
	return 0
}

func (m *TripPath_LaneConnectivity) GetFromLanes() string {
	if m != nil && m.FromLanes != nil {
		return *m.FromLanes
	}
	return ""
}

func (m *TripPath_LaneConnectivity) GetToLanes() string {
	if m != nil && m.ToLanes != nil {
		return *m.ToLanes
	}
	return ""
}

type TripPath_TrafficSegment struct {
	SegmentId        *uint64  `protobuf:"varint,1,opt,name=segment_id,json=segmentId" json:"segment_id,omitempty"`
	BeginPercent     *float32 `protobuf:"fixed32,2,opt,name=begin_percent,json=beginPercent" json:"begin_percent,omitempty"`
	EndPercent       *float32 `protobuf:"fixed32,3,opt,name=end_percent,json=endPercent" json:"end_percent,omitempty"`
	StartsSegment    *bool    `protobuf:"varint,4,opt,name=starts_segment,json=startsSegment" json:"starts_segment,omitempty"`
	EndsSegment      *bool    `protobuf:"varint,5,opt,name=ends_segment,json=endsSegment" json:"ends_segment,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TripPath_TrafficSegment) Reset()         { *m = TripPath_TrafficSegment{} }
func (m *TripPath_TrafficSegment) String() string { return proto.CompactTextString(m) }
func (*TripPath_TrafficSegment) ProtoMessage()    {}
func (*TripPath_TrafficSegment) Descriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 3}
}

func (m *TripPath_TrafficSegment) GetSegmentId() uint64 {
	if m != nil && m.SegmentId != nil {
		return *m.SegmentId
	}
	return 0
}

func (m *TripPath_TrafficSegment) GetBeginPercent() float32 {
	if m != nil && m.BeginPercent != nil {
		return *m.BeginPercent
	}
	return 0
}

func (m *TripPath_TrafficSegment) GetEndPercent() float32 {
	if m != nil && m.EndPercent != nil {
		return *m.EndPercent
	}
	return 0
}

func (m *TripPath_TrafficSegment) GetStartsSegment() bool {
	if m != nil && m.StartsSegment != nil {
		return *m.StartsSegment
	}
	return false
}

func (m *TripPath_TrafficSegment) GetEndsSegment() bool {
	if m != nil && m.EndsSegment != nil {
		return *m.EndsSegment
	}
	return false
}

type TripPath_Edge struct {
	Name                 []string                     `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	Length               *float32                     `protobuf:"fixed32,2,opt,name=length" json:"length,omitempty"`
	Speed                *float32                     `protobuf:"fixed32,3,opt,name=speed" json:"speed,omitempty"`
	RoadClass            *TripPath_RoadClass          `protobuf:"varint,4,opt,name=road_class,json=roadClass,enum=valhalla.odin.TripPath_RoadClass" json:"road_class,omitempty"`
	BeginHeading         *uint32                      `protobuf:"varint,5,opt,name=begin_heading,json=beginHeading" json:"begin_heading,omitempty"`
	EndHeading           *uint32                      `protobuf:"varint,6,opt,name=end_heading,json=endHeading" json:"end_heading,omitempty"`
	BeginShapeIndex      *uint32                      `protobuf:"varint,7,opt,name=begin_shape_index,json=beginShapeIndex" json:"begin_shape_index,omitempty"`
	EndShapeIndex        *uint32                      `protobuf:"varint,8,opt,name=end_shape_index,json=endShapeIndex" json:"end_shape_index,omitempty"`
	Traversability       *TripPath_Traversability     `protobuf:"varint,9,opt,name=traversability,enum=valhalla.odin.TripPath_Traversability" json:"traversability,omitempty"`
	Use                  *TripPath_Use                `protobuf:"varint,10,opt,name=use,enum=valhalla.odin.TripPath_Use" json:"use,omitempty"`
	Toll                 *bool                        `protobuf:"varint,11,opt,name=toll" json:"toll,omitempty"`
	Unpaved              *bool                        `protobuf:"varint,12,opt,name=unpaved" json:"unpaved,omitempty"`
	Tunnel               *bool                        `protobuf:"varint,13,opt,name=tunnel" json:"tunnel,omitempty"`
	Bridge               *bool                        `protobuf:"varint,14,opt,name=bridge" json:"bridge,omitempty"`
	Roundabout           *bool                        `protobuf:"varint,15,opt,name=roundabout" json:"roundabout,omitempty"`
	InternalIntersection *bool                        `protobuf:"varint,16,opt,name=internal_intersection,json=internalIntersection" json:"internal_intersection,omitempty"`
	DriveOnRight         *bool                        `protobuf:"varint,17,opt,name=drive_on_right,json=driveOnRight,def=1" json:"drive_on_right,omitempty"`
	Surface              *TripPath_Surface            `protobuf:"varint,18,opt,name=surface,enum=valhalla.odin.TripPath_Surface" json:"surface,omitempty"`
	Sign                 *TripPath_Sign               `protobuf:"bytes,19,opt,name=sign" json:"sign,omitempty"`
	TravelMode           *TripPath_TravelMode         `protobuf:"varint,20,opt,name=travel_mode,json=travelMode,enum=valhalla.odin.TripPath_TravelMode" json:"travel_mode,omitempty"`
	VehicleType          *TripPath_VehicleType        `protobuf:"varint,21,opt,name=vehicle_type,json=vehicleType,enum=valhalla.odin.TripPath_VehicleType" json:"vehicle_type,omitempty"`
	PedestrianType       *TripPath_PedestrianType     `protobuf:"varint,22,opt,name=pedestrian_type,json=pedestrianType,enum=valhalla.odin.TripPath_PedestrianType" json:"pedestrian_type,omitempty"`
	BicycleType          *TripPath_BicycleType        `protobuf:"varint,23,opt,name=bicycle_type,json=bicycleType,enum=valhalla.odin.TripPath_BicycleType" json:"bicycle_type,omitempty"`
	TransitType          *TripPath_TransitType        `protobuf:"varint,24,opt,name=transit_type,json=transitType,enum=valhalla.odin.TripPath_TransitType" json:"transit_type,omitempty"`
	TransitRouteInfo     *TripPath_TransitRouteInfo   `protobuf:"bytes,25,opt,name=transit_route_info,json=transitRouteInfo" json:"transit_route_info,omitempty"`
	Id                   *uint64                      `protobuf:"varint,26,opt,name=id" json:"id,omitempty"`
	WayId                *uint64                      `protobuf:"varint,27,opt,name=way_id,json=wayId" json:"way_id,omitempty"`
	WeightedGrade        *float32                     `protobuf:"fixed32,28,opt,name=weighted_grade,json=weightedGrade" json:"weighted_grade,omitempty"`
	MaxUpwardGrade       *int32                       `protobuf:"varint,29,opt,name=max_upward_grade,json=maxUpwardGrade" json:"max_upward_grade,omitempty"`
	MaxDownwardGrade     *int32                       `protobuf:"varint,30,opt,name=max_downward_grade,json=maxDownwardGrade" json:"max_downward_grade,omitempty"`
	LaneCount            *uint32                      `protobuf:"varint,31,opt,name=lane_count,json=laneCount" json:"lane_count,omitempty"`
	CycleLane            *TripPath_CycleLane          `protobuf:"varint,32,opt,name=cycle_lane,json=cycleLane,enum=valhalla.odin.TripPath_CycleLane" json:"cycle_lane,omitempty"`
	BicycleNetwork       *uint32                      `protobuf:"varint,33,opt,name=bicycle_network,json=bicycleNetwork" json:"bicycle_network,omitempty"`
	Sidewalk             *TripPath_Sidewalk           `protobuf:"varint,34,opt,name=sidewalk,enum=valhalla.odin.TripPath_Sidewalk" json:"sidewalk,omitempty"`
	Density              *uint32                      `protobuf:"varint,35,opt,name=density" json:"density,omitempty"`
	SpeedLimit           *uint32                      `protobuf:"varint,36,opt,name=speed_limit,json=speedLimit" json:"speed_limit,omitempty"`
	TruckSpeed           *float32                     `protobuf:"fixed32,37,opt,name=truck_speed,json=truckSpeed" json:"truck_speed,omitempty"`
	TruckRoute           *bool                        `protobuf:"varint,38,opt,name=truck_route,json=truckRoute" json:"truck_route,omitempty"`
	LaneConnectivity     []*TripPath_LaneConnectivity `protobuf:"bytes,39,rep,name=lane_connectivity,json=laneConnectivity" json:"lane_connectivity,omitempty"`
	MeanElevation        *int32                       `protobuf:"varint,40,opt,name=mean_elevation,json=meanElevation" json:"mean_elevation,omitempty"`
	TrafficSegment       []*TripPath_TrafficSegment   `protobuf:"bytes,41,rep,name=traffic_segment,json=trafficSegment" json:"traffic_segment,omitempty"`
	NameIsRef            []bool                       `protobuf:"varint,42,rep,name=name_is_ref,json=nameIsRef" json:"name_is_ref,omitempty"`
	XXX_unrecognized     []byte                       `json:"-"`
}

func (m *TripPath_Edge) Reset()                    { *m = TripPath_Edge{} }
func (m *TripPath_Edge) String() string            { return proto.CompactTextString(m) }
func (*TripPath_Edge) ProtoMessage()               {}
func (*TripPath_Edge) Descriptor() ([]byte, []int) { return fileDescriptorTrippath, []int{0, 4} }

const Default_TripPath_Edge_DriveOnRight bool = true

func (m *TripPath_Edge) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TripPath_Edge) GetLength() float32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *TripPath_Edge) GetSpeed() float32 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

func (m *TripPath_Edge) GetRoadClass() TripPath_RoadClass {
	if m != nil && m.RoadClass != nil {
		return *m.RoadClass
	}
	return TripPath_kMotorway
}

func (m *TripPath_Edge) GetBeginHeading() uint32 {
	if m != nil && m.BeginHeading != nil {
		return *m.BeginHeading
	}
	return 0
}

func (m *TripPath_Edge) GetEndHeading() uint32 {
	if m != nil && m.EndHeading != nil {
		return *m.EndHeading
	}
	return 0
}

func (m *TripPath_Edge) GetBeginShapeIndex() uint32 {
	if m != nil && m.BeginShapeIndex != nil {
		return *m.BeginShapeIndex
	}
	return 0
}

func (m *TripPath_Edge) GetEndShapeIndex() uint32 {
	if m != nil && m.EndShapeIndex != nil {
		return *m.EndShapeIndex
	}
	return 0
}

func (m *TripPath_Edge) GetTraversability() TripPath_Traversability {
	if m != nil && m.Traversability != nil {
		return *m.Traversability
	}
	return TripPath_kNone
}

func (m *TripPath_Edge) GetUse() TripPath_Use {
	if m != nil && m.Use != nil {
		return *m.Use
	}
	return TripPath_kRoadUse
}

func (m *TripPath_Edge) GetToll() bool {
	if m != nil && m.Toll != nil {
		return *m.Toll
	}
	return false
}

func (m *TripPath_Edge) GetUnpaved() bool {
	if m != nil && m.Unpaved != nil {
		return *m.Unpaved
	}
	return false
}

func (m *TripPath_Edge) GetTunnel() bool {
	if m != nil && m.Tunnel != nil {
		return *m.Tunnel
	}
	return false
}

func (m *TripPath_Edge) GetBridge() bool {
	if m != nil && m.Bridge != nil {
		return *m.Bridge
	}
	return false
}

func (m *TripPath_Edge) GetRoundabout() bool {
	if m != nil && m.Roundabout != nil {
		return *m.Roundabout
	}
	return false
}

func (m *TripPath_Edge) GetInternalIntersection() bool {
	if m != nil && m.InternalIntersection != nil {
		return *m.InternalIntersection
	}
	return false
}

func (m *TripPath_Edge) GetDriveOnRight() bool {
	if m != nil && m.DriveOnRight != nil {
		return *m.DriveOnRight
	}
	return Default_TripPath_Edge_DriveOnRight
}

func (m *TripPath_Edge) GetSurface() TripPath_Surface {
	if m != nil && m.Surface != nil {
		return *m.Surface
	}
	return TripPath_kPavedSmooth
}

func (m *TripPath_Edge) GetSign() *TripPath_Sign {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *TripPath_Edge) GetTravelMode() TripPath_TravelMode {
	if m != nil && m.TravelMode != nil {
		return *m.TravelMode
	}
	return TripPath_kDrive
}

func (m *TripPath_Edge) GetVehicleType() TripPath_VehicleType {
	if m != nil && m.VehicleType != nil {
		return *m.VehicleType
	}
	return TripPath_kCar
}

func (m *TripPath_Edge) GetPedestrianType() TripPath_PedestrianType {
	if m != nil && m.PedestrianType != nil {
		return *m.PedestrianType
	}
	return TripPath_kFoot
}

func (m *TripPath_Edge) GetBicycleType() TripPath_BicycleType {
	if m != nil && m.BicycleType != nil {
		return *m.BicycleType
	}
	return TripPath_kRoad
}

func (m *TripPath_Edge) GetTransitType() TripPath_TransitType {
	if m != nil && m.TransitType != nil {
		return *m.TransitType
	}
	return TripPath_kTram
}

func (m *TripPath_Edge) GetTransitRouteInfo() *TripPath_TransitRouteInfo {
	if m != nil {
		return m.TransitRouteInfo
	}
	return nil
}

func (m *TripPath_Edge) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TripPath_Edge) GetWayId() uint64 {
	if m != nil && m.WayId != nil {
		return *m.WayId
	}
	return 0
}

func (m *TripPath_Edge) GetWeightedGrade() float32 {
	if m != nil && m.WeightedGrade != nil {
		return *m.WeightedGrade
	}
	return 0
}

func (m *TripPath_Edge) GetMaxUpwardGrade() int32 {
	if m != nil && m.MaxUpwardGrade != nil {
		return *m.MaxUpwardGrade
	}
	return 0
}

func (m *TripPath_Edge) GetMaxDownwardGrade() int32 {
	if m != nil && m.MaxDownwardGrade != nil {
		return *m.MaxDownwardGrade
	}
	return 0
}

func (m *TripPath_Edge) GetLaneCount() uint32 {
	if m != nil && m.LaneCount != nil {
		return *m.LaneCount
	}
	return 0
}

func (m *TripPath_Edge) GetCycleLane() TripPath_CycleLane {
	if m != nil && m.CycleLane != nil {
		return *m.CycleLane
	}
	return TripPath_kNoCycleLane
}

func (m *TripPath_Edge) GetBicycleNetwork() uint32 {
	if m != nil && m.BicycleNetwork != nil {
		return *m.BicycleNetwork
	}
	return 0
}

func (m *TripPath_Edge) GetSidewalk() TripPath_Sidewalk {
	if m != nil && m.Sidewalk != nil {
		return *m.Sidewalk
	}
	return TripPath_kNoSidewalk
}

func (m *TripPath_Edge) GetDensity() uint32 {
	if m != nil && m.Density != nil {
		return *m.Density
	}
	return 0
}

func (m *TripPath_Edge) GetSpeedLimit() uint32 {
	if m != nil && m.SpeedLimit != nil {
		return *m.SpeedLimit
	}
	return 0
}

func (m *TripPath_Edge) GetTruckSpeed() float32 {
	if m != nil && m.TruckSpeed != nil {
		return *m.TruckSpeed
	}
	return 0
}

func (m *TripPath_Edge) GetTruckRoute() bool {
	if m != nil && m.TruckRoute != nil {
		return *m.TruckRoute
	}
	return false
}

func (m *TripPath_Edge) GetLaneConnectivity() []*TripPath_LaneConnectivity {
	if m != nil {
		return m.LaneConnectivity
	}
	return nil
}

func (m *TripPath_Edge) GetMeanElevation() int32 {
	if m != nil && m.MeanElevation != nil {
		return *m.MeanElevation
	}
	return 0
}

func (m *TripPath_Edge) GetTrafficSegment() []*TripPath_TrafficSegment {
	if m != nil {
		return m.TrafficSegment
	}
	return nil
}

func (m *TripPath_Edge) GetNameIsRef() []bool {
	if m != nil {
		return m.NameIsRef
	}
	return nil
}

type TripPath_IntersectingEdge struct {
	BeginHeading        *uint32                  `protobuf:"varint,1,opt,name=begin_heading,json=beginHeading" json:"begin_heading,omitempty"`
	PrevNameConsistency *bool                    `protobuf:"varint,2,opt,name=prev_name_consistency,json=prevNameConsistency" json:"prev_name_consistency,omitempty"`
	CurrNameConsistency *bool                    `protobuf:"varint,3,opt,name=curr_name_consistency,json=currNameConsistency" json:"curr_name_consistency,omitempty"`
	Driveability        *TripPath_Traversability `protobuf:"varint,4,opt,name=driveability,enum=valhalla.odin.TripPath_Traversability" json:"driveability,omitempty"`
	Cyclability         *TripPath_Traversability `protobuf:"varint,5,opt,name=cyclability,enum=valhalla.odin.TripPath_Traversability" json:"cyclability,omitempty"`
	Walkability         *TripPath_Traversability `protobuf:"varint,6,opt,name=walkability,enum=valhalla.odin.TripPath_Traversability" json:"walkability,omitempty"`
	XXX_unrecognized    []byte                   `json:"-"`
}

func (m *TripPath_IntersectingEdge) Reset()         { *m = TripPath_IntersectingEdge{} }
func (m *TripPath_IntersectingEdge) String() string { return proto.CompactTextString(m) }
func (*TripPath_IntersectingEdge) ProtoMessage()    {}
func (*TripPath_IntersectingEdge) Descriptor() ([]byte, []int) {
	return fileDescriptorTrippath, []int{0, 5}
}

func (m *TripPath_IntersectingEdge) GetBeginHeading() uint32 {
	if m != nil && m.BeginHeading != nil {
		return *m.BeginHeading
	}
	return 0
}

func (m *TripPath_IntersectingEdge) GetPrevNameConsistency() bool {
	if m != nil && m.PrevNameConsistency != nil {
		return *m.PrevNameConsistency
	}
	return false
}

func (m *TripPath_IntersectingEdge) GetCurrNameConsistency() bool {
	if m != nil && m.CurrNameConsistency != nil {
		return *m.CurrNameConsistency
	}
	return false
}

func (m *TripPath_IntersectingEdge) GetDriveability() TripPath_Traversability {
	if m != nil && m.Driveability != nil {
		return *m.Driveability
	}
	return TripPath_kNone
}

func (m *TripPath_IntersectingEdge) GetCyclability() TripPath_Traversability {
	if m != nil && m.Cyclability != nil {
		return *m.Cyclability
	}
	return TripPath_kNone
}

func (m *TripPath_IntersectingEdge) GetWalkability() TripPath_Traversability {
	if m != nil && m.Walkability != nil {
		return *m.Walkability
	}
	return TripPath_kNone
}

type TripPath_Node struct {
	Edge                *TripPath_Edge                     `protobuf:"bytes,1,opt,name=edge" json:"edge,omitempty"`
	IntersectingEdge    []*TripPath_IntersectingEdge       `protobuf:"bytes,2,rep,name=intersecting_edge,json=intersectingEdge" json:"intersecting_edge,omitempty"`
	ElapsedTime         *uint32                            `protobuf:"varint,3,opt,name=elapsed_time,json=elapsedTime" json:"elapsed_time,omitempty"`
	AdminIndex          *uint32                            `protobuf:"varint,4,opt,name=admin_index,json=adminIndex" json:"admin_index,omitempty"`
	Type                *TripPath_Node_Type                `protobuf:"varint,5,opt,name=type,enum=valhalla.odin.TripPath_Node_Type" json:"type,omitempty"`
	Fork                *bool                              `protobuf:"varint,6,opt,name=fork" json:"fork,omitempty"`
	TransitPlatformInfo *valhalla_odin.TransitPlatformInfo `protobuf:"bytes,7,opt,name=transit_platform_info,json=transitPlatformInfo" json:"transit_platform_info,omitempty"`
	TransitStationInfo  *valhalla_odin.TransitStationInfo  `protobuf:"bytes,8,opt,name=transit_station_info,json=transitStationInfo" json:"transit_station_info,omitempty"`
	TransitEgressInfo   *valhalla_odin.TransitEgressInfo   `protobuf:"bytes,9,opt,name=transit_egress_info,json=transitEgressInfo" json:"transit_egress_info,omitempty"`
	TimeZone            *string                            `protobuf:"bytes,10,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	XXX_unrecognized    []byte                             `json:"-"`
}

func (m *TripPath_Node) Reset()                    { *m = TripPath_Node{} }
func (m *TripPath_Node) String() string            { return proto.CompactTextString(m) }
func (*TripPath_Node) ProtoMessage()               {}
func (*TripPath_Node) Descriptor() ([]byte, []int) { return fileDescriptorTrippath, []int{0, 6} }

func (m *TripPath_Node) GetEdge() *TripPath_Edge {
	if m != nil {
		return m.Edge
	}
	return nil
}

func (m *TripPath_Node) GetIntersectingEdge() []*TripPath_IntersectingEdge {
	if m != nil {
		return m.IntersectingEdge
	}
	return nil
}

func (m *TripPath_Node) GetElapsedTime() uint32 {
	if m != nil && m.ElapsedTime != nil {
		return *m.ElapsedTime
	}
	return 0
}

func (m *TripPath_Node) GetAdminIndex() uint32 {
	if m != nil && m.AdminIndex != nil {
		return *m.AdminIndex
	}
	return 0
}

func (m *TripPath_Node) GetType() TripPath_Node_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return TripPath_Node_kStreetIntersection
}

func (m *TripPath_Node) GetFork() bool {
	if m != nil && m.Fork != nil {
		return *m.Fork
	}
	return false
}

func (m *TripPath_Node) GetTransitPlatformInfo() *valhalla_odin.TransitPlatformInfo {
	if m != nil {
		return m.TransitPlatformInfo
	}
	return nil
}

func (m *TripPath_Node) GetTransitStationInfo() *valhalla_odin.TransitStationInfo {
	if m != nil {
		return m.TransitStationInfo
	}
	return nil
}

func (m *TripPath_Node) GetTransitEgressInfo() *valhalla_odin.TransitEgressInfo {
	if m != nil {
		return m.TransitEgressInfo
	}
	return nil
}

func (m *TripPath_Node) GetTimeZone() string {
	if m != nil && m.TimeZone != nil {
		return *m.TimeZone
	}
	return ""
}

type TripPath_Admin struct {
	CountryCode      *string `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	CountryText      *string `protobuf:"bytes,2,opt,name=country_text,json=countryText" json:"country_text,omitempty"`
	StateCode        *string `protobuf:"bytes,3,opt,name=state_code,json=stateCode" json:"state_code,omitempty"`
	StateText        *string `protobuf:"bytes,4,opt,name=state_text,json=stateText" json:"state_text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TripPath_Admin) Reset()                    { *m = TripPath_Admin{} }
func (m *TripPath_Admin) String() string            { return proto.CompactTextString(m) }
func (*TripPath_Admin) ProtoMessage()               {}
func (*TripPath_Admin) Descriptor() ([]byte, []int) { return fileDescriptorTrippath, []int{0, 7} }

func (m *TripPath_Admin) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *TripPath_Admin) GetCountryText() string {
	if m != nil && m.CountryText != nil {
		return *m.CountryText
	}
	return ""
}

func (m *TripPath_Admin) GetStateCode() string {
	if m != nil && m.StateCode != nil {
		return *m.StateCode
	}
	return ""
}

func (m *TripPath_Admin) GetStateText() string {
	if m != nil && m.StateText != nil {
		return *m.StateText
	}
	return ""
}

func init() {
	proto.RegisterType((*TripPath)(nil), "valhalla.odin.TripPath")
	proto.RegisterType((*TripPath_Sign)(nil), "valhalla.odin.TripPath.Sign")
	proto.RegisterType((*TripPath_TransitRouteInfo)(nil), "valhalla.odin.TripPath.TransitRouteInfo")
	proto.RegisterType((*TripPath_LaneConnectivity)(nil), "valhalla.odin.TripPath.LaneConnectivity")
	proto.RegisterType((*TripPath_TrafficSegment)(nil), "valhalla.odin.TripPath.TrafficSegment")
	proto.RegisterType((*TripPath_Edge)(nil), "valhalla.odin.TripPath.Edge")
	proto.RegisterType((*TripPath_IntersectingEdge)(nil), "valhalla.odin.TripPath.IntersectingEdge")
	proto.RegisterType((*TripPath_Node)(nil), "valhalla.odin.TripPath.Node")
	proto.RegisterType((*TripPath_Admin)(nil), "valhalla.odin.TripPath.Admin")
	proto.RegisterEnum("valhalla.odin.TripPath_Traversability", TripPath_Traversability_name, TripPath_Traversability_value)
	proto.RegisterEnum("valhalla.odin.TripPath_RoadClass", TripPath_RoadClass_name, TripPath_RoadClass_value)
	proto.RegisterEnum("valhalla.odin.TripPath_Use", TripPath_Use_name, TripPath_Use_value)
	proto.RegisterEnum("valhalla.odin.TripPath_Surface", TripPath_Surface_name, TripPath_Surface_value)
	proto.RegisterEnum("valhalla.odin.TripPath_TravelMode", TripPath_TravelMode_name, TripPath_TravelMode_value)
	proto.RegisterEnum("valhalla.odin.TripPath_VehicleType", TripPath_VehicleType_name, TripPath_VehicleType_value)
	proto.RegisterEnum("valhalla.odin.TripPath_PedestrianType", TripPath_PedestrianType_name, TripPath_PedestrianType_value)
	proto.RegisterEnum("valhalla.odin.TripPath_BicycleType", TripPath_BicycleType_name, TripPath_BicycleType_value)
	proto.RegisterEnum("valhalla.odin.TripPath_TransitType", TripPath_TransitType_name, TripPath_TransitType_value)
	proto.RegisterEnum("valhalla.odin.TripPath_CycleLane", TripPath_CycleLane_name, TripPath_CycleLane_value)
	proto.RegisterEnum("valhalla.odin.TripPath_Sidewalk", TripPath_Sidewalk_name, TripPath_Sidewalk_value)
	proto.RegisterEnum("valhalla.odin.TripPath_Node_Type", TripPath_Node_Type_name, TripPath_Node_Type_value)
}

func init() { proto.RegisterFile("trippath.proto", fileDescriptorTrippath) }

var fileDescriptorTrippath = []byte{
	// 2601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0x5f, 0x6f, 0x1b, 0xc7,
	0x11, 0x37, 0xc5, 0xff, 0x4b, 0x89, 0x3a, 0xad, 0xa5, 0xf8, 0x4c, 0xc7, 0x8e, 0xcc, 0xd4, 0x89,
	0x62, 0x34, 0x72, 0x20, 0x37, 0x05, 0x52, 0xf4, 0x21, 0x26, 0xfd, 0x27, 0x0a, 0x6c, 0x59, 0x38,
	0x52, 0x09, 0x90, 0x87, 0x1e, 0x96, 0x77, 0x23, 0x72, 0xc1, 0xe3, 0x2e, 0xb1, 0xb7, 0x27, 0x89,
	0x45, 0x9f, 0xfb, 0x92, 0x16, 0xfd, 0x3e, 0x7d, 0xe9, 0x57, 0xe8, 0xa7, 0xe8, 0xd7, 0x68, 0x31,
	0xb3, 0x77, 0x14, 0x25, 0x47, 0x2a, 0xf2, 0xc6, 0xf9, 0xcd, 0x6f, 0x67, 0xf7, 0x66, 0x66, 0x67,
	0x66, 0xc9, 0xda, 0xd6, 0xc8, 0xf9, 0x5c, 0xd8, 0xc9, 0xfe, 0xdc, 0x68, 0xab, 0xf9, 0xc6, 0x99,
	0x48, 0x26, 0x22, 0x49, 0xc4, 0xbe, 0x8e, 0xa5, 0xea, 0x78, 0xa8, 0x8e, 0xf4, 0x6c, 0xa6, 0x95,
	0x23, 0x74, 0xff, 0xf9, 0x25, 0x6b, 0x0c, 0x8d, 0x9c, 0x1f, 0x0b, 0x3b, 0xe1, 0x9f, 0xb2, 0x0d,
	0x9d, 0xce, 0xc2, 0x68, 0x22, 0xd4, 0x18, 0x52, 0xb0, 0x7e, 0x69, 0xb7, 0xb4, 0x57, 0x09, 0xd6,
	0x75, 0x3a, 0xeb, 0x17, 0x18, 0xbf, 0xc7, 0xea, 0x68, 0x25, 0x94, 0xb1, 0xbf, 0x46, 0xea, 0x1a,
	0x8a, 0x87, 0x31, 0xdf, 0x61, 0xb5, 0x04, 0xc6, 0x88, 0x97, 0x77, 0x4b, 0x7b, 0x1b, 0x41, 0x35,
	0x81, 0xf1, 0x61, 0xcc, 0x1f, 0xb0, 0x26, 0xc2, 0x91, 0xce, 0x94, 0xf5, 0x2b, 0xa4, 0x69, 0x24,
	0x30, 0xee, 0xa3, 0xcc, 0x9f, 0xb3, 0x46, 0xa2, 0x23, 0x61, 0xa5, 0x56, 0x7e, 0x75, 0xb7, 0xbc,
	0xd7, 0x3a, 0xb8, 0xb7, 0x7f, 0xe5, 0xc8, 0xfb, 0x6f, 0x73, 0x75, 0xb0, 0x24, 0xf2, 0xaf, 0x58,
	0x45, 0xe9, 0x18, 0xfc, 0x1a, 0x2d, 0xf8, 0xf8, 0xda, 0x82, 0xe2, 0x6b, 0xf6, 0x8f, 0x74, 0x0c,
	0x01, 0x31, 0xf9, 0x73, 0x56, 0x15, 0xf1, 0x4c, 0x2a, 0xbf, 0x4e, 0x4b, 0x1e, 0xde, 0xb4, 0xe4,
	0x05, 0x92, 0x02, 0xc7, 0xe5, 0xdb, 0xac, 0x9a, 0x4e, 0xc4, 0x1c, 0xfc, 0xc6, 0x6e, 0x69, 0xaf,
	0x19, 0x38, 0x81, 0xef, 0xb3, 0xca, 0x68, 0xa4, 0x2f, 0xfc, 0xe6, 0x6e, 0x69, 0xaf, 0x75, 0xd0,
	0xb9, 0x66, 0xa9, 0xa7, 0x33, 0x15, 0x4b, 0x35, 0xee, 0xe9, 0x8b, 0x80, 0x78, 0x9d, 0xbf, 0x96,
	0x58, 0x65, 0x20, 0xc7, 0x8a, 0x7f, 0xc2, 0x5a, 0x70, 0x21, 0x6d, 0xa8, 0xb2, 0xd9, 0x08, 0x8c,
	0x5f, 0xda, 0x2d, 0xef, 0x35, 0x03, 0x86, 0xd0, 0x11, 0x21, 0x4b, 0xc2, 0xc8, 0x08, 0x15, 0x4d,
	0xfc, 0xb5, 0x4b, 0x42, 0x8f, 0x90, 0x25, 0xc1, 0xea, 0x73, 0x61, 0xd0, 0xcb, 0x4b, 0xc2, 0x90,
	0x10, 0x74, 0xb5, 0xdb, 0x42, 0xcc, 0xc0, 0xaf, 0x90, 0xba, 0x41, 0x1b, 0x88, 0x19, 0x74, 0xfe,
	0x56, 0x66, 0xde, 0xd0, 0x08, 0x95, 0x4a, 0x1b, 0xe8, 0xcc, 0xc2, 0xa1, 0x3a, 0xd5, 0xfc, 0x21,
	0x63, 0x5a, 0x41, 0x6a, 0x35, 0xc5, 0xb3, 0x44, 0x1f, 0xda, 0xcc, 0x91, 0xc3, 0x98, 0xdf, 0x67,
	0x8d, 0x51, 0xa2, 0xa3, 0x69, 0x11, 0xec, 0x8d, 0xa0, 0x4e, 0xf2, 0x61, 0xbc, 0x9a, 0x06, 0x2e,
	0xdc, 0x45, 0x1a, 0x3c, 0x64, 0x2c, 0x9d, 0x68, 0xb3, 0x3c, 0x05, 0x99, 0x24, 0x04, 0x8f, 0x41,
	0xe9, 0xa0, 0xd5, 0xd8, 0x69, 0xab, 0xa4, 0x6d, 0x20, 0x40, 0xca, 0x0e, 0x6b, 0x4c, 0x40, 0xc4,
	0xa9, 0x1c, 0x2b, 0xbf, 0xe6, 0x74, 0x85, 0x8c, 0xe1, 0x88, 0x74, 0xa2, 0x8d, 0x5f, 0x77, 0xd9,
	0x45, 0x02, 0xee, 0x66, 0xe1, 0xc2, 0x86, 0x4e, 0xd5, 0x20, 0x55, 0x13, 0x91, 0x3e, 0xa9, 0x77,
	0x59, 0x2b, 0x86, 0x34, 0x32, 0x72, 0x4e, 0x29, 0xd6, 0x24, 0x9b, 0xab, 0x10, 0xdf, 0x67, 0x77,
	0xf5, 0x1c, 0x8c, 0xb0, 0xda, 0x84, 0x2b, 0xae, 0x60, 0xc4, 0xdc, 0x2a, 0x54, 0xef, 0x97, 0x2e,
	0xc1, 0x3b, 0x52, 0xf0, 0xe9, 0x1b, 0x5a, 0xc4, 0x5c, 0x2f, 0x40, 0xfa, 0x8e, 0xc7, 0x6c, 0x29,
	0x87, 0x99, 0x49, 0xfc, 0x75, 0xb7, 0x6f, 0x81, 0x9d, 0x98, 0xa4, 0x93, 0x30, 0xef, 0xad, 0x50,
	0xd0, 0xd7, 0x4a, 0x41, 0x64, 0xe5, 0x99, 0xb4, 0x0b, 0xfe, 0x88, 0xb5, 0x4e, 0x8d, 0x9e, 0x85,
	0xe7, 0x62, 0x51, 0x84, 0xa3, 0x12, 0x34, 0x11, 0xfa, 0x51, 0x2c, 0x9c, 0x6b, 0x49, 0x9f, 0x08,
	0x05, 0x29, 0x05, 0xa4, 0xe9, 0xd4, 0x68, 0x29, 0xc5, 0x68, 0x59, 0x9d, 0x2b, 0xcb, 0xa4, 0xac,
	0x5b, 0x4d, 0xaa, 0xce, 0xbf, 0x4a, 0xac, 0x3d, 0x34, 0xe2, 0xf4, 0x54, 0x46, 0x03, 0x18, 0xcf,
	0x40, 0x59, 0x8a, 0x93, 0xfb, 0xb9, 0xb2, 0x57, 0x8e, 0xb8, 0xef, 0x1c, 0xc1, 0x58, 0xaa, 0x70,
	0x0e, 0x26, 0x02, 0x65, 0x69, 0xbb, 0xb5, 0x60, 0x9d, 0xc0, 0x63, 0x87, 0x51, 0x46, 0xaa, 0x78,
	0x49, 0x29, 0x13, 0x85, 0x81, 0x8a, 0x0b, 0xc2, 0x13, 0xd6, 0x4e, 0xad, 0x30, 0x36, 0x0d, 0x73,
	0xcb, 0x94, 0x10, 0x8d, 0x60, 0xc3, 0xa1, 0xc5, 0x59, 0x1e, 0xb3, 0x75, 0x50, 0xf1, 0x25, 0xa9,
	0x4a, 0x24, 0xb4, 0x5d, 0x50, 0x3a, 0xff, 0xd8, 0x64, 0x95, 0x57, 0xf1, 0x18, 0x38, 0x67, 0x15,
	0xf2, 0xbb, 0xbb, 0x40, 0xf4, 0x9b, 0x7f, 0x84, 0xa5, 0x47, 0x8d, 0xed, 0x24, 0x3f, 0x65, 0x2e,
	0xd1, 0x15, 0x9e, 0x03, 0xc4, 0xf9, 0xc9, 0x9c, 0xc0, 0xbf, 0x65, 0xcc, 0x68, 0x11, 0x87, 0x51,
	0x22, 0xd2, 0x94, 0x0e, 0xd4, 0x3e, 0x78, 0x7c, 0x53, 0x49, 0x08, 0xb4, 0x88, 0xfb, 0x48, 0x0c,
	0x9a, 0xa6, 0xf8, 0x79, 0xe9, 0x1c, 0xcc, 0x4e, 0xa9, 0xc6, 0x74, 0xe0, 0x8d, 0xdc, 0x39, 0xdf,
	0x39, 0xac, 0x70, 0x4e, 0x41, 0xa9, 0x11, 0x05, 0x9d, 0x53, 0x10, 0x9e, 0xb2, 0x2d, 0x67, 0x85,
	0x2a, 0x4b, 0x28, 0x55, 0x0c, 0x17, 0x79, 0x76, 0x6f, 0x92, 0x62, 0x80, 0xf8, 0x21, 0xc2, 0xfc,
	0x33, 0xb6, 0x89, 0xc6, 0x56, 0x99, 0x2e, 0xd9, 0x37, 0x40, 0xc5, 0x2b, 0xbc, 0x23, 0x6c, 0x01,
	0xe2, 0x0c, 0x4c, 0x2a, 0x46, 0x32, 0x91, 0x76, 0x41, 0x39, 0xdf, 0x3e, 0xf8, 0xec, 0xa6, 0xef,
	0x1b, 0x5e, 0x61, 0x07, 0xd7, 0x56, 0xf3, 0x2f, 0x59, 0x39, 0x4b, 0x81, 0xae, 0x43, 0xfb, 0xe0,
	0xc1, 0x4d, 0x46, 0x4e, 0x52, 0x08, 0x90, 0x87, 0xc1, 0xb1, 0x3a, 0x49, 0xe8, 0x52, 0x34, 0x02,
	0xfa, 0xcd, 0x7d, 0x56, 0xcf, 0xd4, 0x5c, 0x9c, 0x41, 0x4c, 0xf7, 0xa0, 0x11, 0x14, 0x22, 0x86,
	0xcd, 0x66, 0x4a, 0x41, 0xe2, 0x6f, 0x90, 0x22, 0x97, 0x10, 0x1f, 0x19, 0x19, 0x8f, 0xc1, 0x6f,
	0x3b, 0xdc, 0x49, 0xfc, 0x11, 0x06, 0x2e, 0x53, 0xb1, 0x18, 0xe9, 0xcc, 0xfa, 0x9b, 0xa4, 0x5b,
	0x41, 0xf8, 0x73, 0xb6, 0x23, 0x95, 0x05, 0xa3, 0x44, 0x12, 0xd2, 0x8f, 0x14, 0xaf, 0x96, 0x56,
	0xbe, 0x47, 0xd4, 0xed, 0x42, 0x79, 0xb8, 0xa2, 0xe3, 0x4f, 0x59, 0x3b, 0x36, 0xf2, 0x0c, 0x42,
	0xad, 0x42, 0x23, 0xc7, 0x13, 0xeb, 0x6f, 0x21, 0xfb, 0x0f, 0x15, 0x6b, 0x32, 0x08, 0xd6, 0x49,
	0xf7, 0x5e, 0x05, 0xa8, 0xe1, 0xdf, 0xb0, 0x7a, 0x9a, 0x99, 0x53, 0x11, 0x81, 0xcf, 0xc9, 0x23,
	0x9f, 0xdc, 0xe4, 0x91, 0x81, 0xa3, 0x05, 0x05, 0x1f, 0x9b, 0x16, 0x95, 0xb5, 0xbb, 0xd4, 0x37,
	0x6e, 0x6c, 0x5a, 0xd8, 0x2a, 0x02, 0x62, 0xf2, 0x3e, 0x6b, 0x51, 0x30, 0x92, 0x70, 0x86, 0xdd,
	0x6e, 0x9b, 0x36, 0xec, 0xde, 0x1a, 0xc7, 0xe4, 0x1d, 0xf6, 0x3c, 0x66, 0x97, 0xbf, 0xf9, 0x6b,
	0xb6, 0x7e, 0x06, 0x13, 0x19, 0x25, 0x10, 0xda, 0xc5, 0x1c, 0xfc, 0x1d, 0xb2, 0xf2, 0xe9, 0x4d,
	0x56, 0x7e, 0x70, 0xdc, 0xe1, 0x62, 0x0e, 0x41, 0xeb, 0xec, 0x52, 0xe0, 0xef, 0xd9, 0xe6, 0x1c,
	0x62, 0x48, 0xad, 0x91, 0x42, 0x39, 0x53, 0x1f, 0xdd, 0x9e, 0x58, 0xc7, 0x4b, 0x3a, 0x59, 0x6b,
	0xcf, 0xaf, 0xc8, 0x78, 0xb0, 0x91, 0x8c, 0x16, 0xcb, 0x83, 0xdd, 0xbb, 0xfd, 0x60, 0x3d, 0xc7,
	0x75, 0x07, 0x1b, 0x5d, 0x0a, 0x68, 0xc7, 0xba, 0xae, 0xe6, 0xec, 0xf8, 0xb7, 0xdb, 0xc9, 0x3b,
	0xa0, 0xb3, 0x63, 0x2f, 0x05, 0xfe, 0x03, 0xe3, 0x85, 0x1d, 0x83, 0xed, 0x31, 0x94, 0xea, 0x54,
	0xfb, 0xf7, 0x29, 0x5a, 0x7b, 0xff, 0xc7, 0xda, 0xb2, 0x9f, 0x06, 0x9e, 0xbd, 0xde, 0x61, 0xdb,
	0x6c, 0x4d, 0xc6, 0x7e, 0x87, 0xca, 0xeb, 0x9a, 0xa4, 0x29, 0x29, 0x2f, 0xef, 0x0f, 0x08, 0xab,
	0x9e, 0x53, 0x69, 0x7f, 0xc2, 0xda, 0xe7, 0x80, 0x39, 0x06, 0x71, 0x38, 0x36, 0x22, 0x06, 0xff,
	0x63, 0x2a, 0x59, 0x1b, 0x05, 0xfa, 0x06, 0x41, 0xbe, 0xc7, 0xbc, 0x99, 0xb8, 0x08, 0xb3, 0x39,
	0xf6, 0xfb, 0x9c, 0xf8, 0x70, 0xb7, 0xb4, 0x57, 0x0d, 0xda, 0x33, 0x71, 0x71, 0x42, 0xb0, 0x63,
	0xfe, 0x96, 0x71, 0x64, 0xc6, 0xfa, 0x5c, 0xad, 0x70, 0x1f, 0x11, 0x17, 0x6d, 0xbc, 0xcc, 0x15,
	0x8e, 0xfd, 0x90, 0x31, 0xec, 0x1b, 0xf9, 0x94, 0xf6, 0x89, 0x6b, 0xa3, 0x09, 0xf5, 0x27, 0x1c,
	0xd3, 0xbe, 0x65, 0xcc, 0x85, 0x0a, 0x21, 0x7f, 0xf7, 0xf6, 0x8a, 0xd9, 0x47, 0x26, 0xb6, 0x9d,
	0xa0, 0x19, 0x15, 0x3f, 0xf9, 0xe7, 0x6c, 0xb3, 0x08, 0xb7, 0x02, 0x7b, 0xae, 0xcd, 0xd4, 0x7f,
	0x4c, 0xbb, 0xb4, 0x73, 0xf8, 0xc8, 0xa1, 0xfc, 0x8f, 0xac, 0x91, 0xca, 0x18, 0xce, 0x45, 0x32,
	0xf5, 0xbb, 0xb4, 0xd1, 0xee, 0xcd, 0x77, 0xc5, 0xf1, 0x82, 0xe5, 0x0a, 0xac, 0x35, 0x31, 0x60,
	0x00, 0x16, 0xfe, 0xa7, 0x6e, 0x5e, 0xc9, 0x45, 0xac, 0xc6, 0x54, 0xfd, 0xc3, 0x44, 0xce, 0xa4,
	0xf5, 0x7f, 0xe3, 0xaa, 0x31, 0x41, 0x6f, 0x11, 0x41, 0x82, 0x35, 0x59, 0x34, 0x0d, 0x5d, 0xc7,
	0x78, 0xe2, 0x7a, 0x19, 0x41, 0x03, 0x6a, 0x1b, 0x4b, 0x02, 0xe5, 0x87, 0xff, 0x99, 0x2b, 0x3f,
	0x04, 0x51, 0xb8, 0xf9, 0x09, 0xdb, 0xca, 0x9d, 0x78, 0xd9, 0xd3, 0xfd, 0xcf, 0x69, 0xe2, 0xbc,
	0x31, 0x83, 0xae, 0xcf, 0x00, 0x81, 0x97, 0x5c, 0x9f, 0x0a, 0x9e, 0xb0, 0xf6, 0x0c, 0x84, 0x0a,
	0x21, 0x81, 0x33, 0x37, 0x29, 0xef, 0x51, 0x14, 0x37, 0x10, 0x7d, 0x55, 0x80, 0x78, 0x43, 0xad,
	0xeb, 0xf0, 0xcb, 0x36, 0xfa, 0x05, 0xed, 0x7d, 0x5b, 0xe9, 0x5f, 0x19, 0x08, 0xa8, 0xf4, 0xaf,
	0x0e, 0x08, 0x8f, 0x58, 0x0b, 0x9b, 0x6b, 0x28, 0xd3, 0xd0, 0xc0, 0xa9, 0xff, 0x74, 0xb7, 0xbc,
	0xd7, 0x08, 0x9a, 0x08, 0x1d, 0xa6, 0x01, 0x9c, 0x76, 0xfe, 0xbb, 0xc6, 0xbc, 0xcb, 0x4a, 0xaa,
	0xc6, 0xd4, 0x9d, 0x3f, 0xe8, 0x8c, 0xa5, 0x5f, 0xe8, 0x8c, 0x07, 0x6c, 0x67, 0x6e, 0xe0, 0x8c,
	0xe6, 0x27, 0xf4, 0x56, 0x2a, 0x53, 0x0b, 0x2a, 0x5a, 0x50, 0xf7, 0x6e, 0x04, 0x77, 0x51, 0x89,
	0x73, 0x54, 0xff, 0x52, 0x85, 0x6b, 0xa2, 0xcc, 0x98, 0x0f, 0xd7, 0x94, 0xdd, 0x1a, 0x54, 0x5e,
	0x5f, 0xf3, 0x3d, 0x73, 0xe5, 0xbb, 0x68, 0x85, 0x95, 0x5f, 0xd5, 0x0a, 0xaf, 0xac, 0xe5, 0xdf,
	0xb1, 0x16, 0xe6, 0x69, 0x61, 0xaa, 0xfa, 0xab, 0x4c, 0xad, 0x2e, 0x45, 0x4b, 0x98, 0xab, 0x85,
	0xa5, 0xda, 0xaf, 0xb3, 0xb4, 0xb2, 0xb4, 0xf3, 0xf7, 0x1a, 0xab, 0xe0, 0x2b, 0x07, 0x9b, 0x0b,
	0x60, 0xbb, 0x2c, 0xdd, 0xde, 0x5c, 0x30, 0x42, 0x01, 0x31, 0x31, 0x57, 0xe5, 0x4a, 0xec, 0x42,
	0x5a, 0xbe, 0x76, 0x7b, 0xae, 0x5e, 0x0f, 0x76, 0xe0, 0xc9, 0xeb, 0xe1, 0xc7, 0x41, 0x2e, 0x11,
	0xf3, 0x14, 0xe2, 0xd0, 0xca, 0x19, 0xe4, 0x4f, 0x83, 0x56, 0x8e, 0x0d, 0xe5, 0x0c, 0xf0, 0x1a,
	0xd1, 0xfb, 0x2a, 0x9f, 0x62, 0xdc, 0x8b, 0x90, 0x11, 0xe4, 0x46, 0x98, 0xaf, 0x59, 0x85, 0x2a,
	0x79, 0xf5, 0xf6, 0x32, 0x83, 0x1f, 0xbe, 0x4f, 0x75, 0x9c, 0xe8, 0x38, 0x7a, 0x9c, 0x62, 0x59,
	0xa9, 0xb9, 0xd1, 0x03, 0x7f, 0xf3, 0x1f, 0xd8, 0x4e, 0x51, 0xd4, 0xe7, 0x89, 0xb0, 0xa7, 0xda,
	0xcc, 0x5c, 0x5d, 0xaf, 0x93, 0xa3, 0x3e, 0x6c, 0xa6, 0xc4, 0x3d, 0xce, 0xa9, 0x54, 0xd1, 0xef,
	0xda, 0x0f, 0x41, 0x3e, 0x60, 0xdb, 0x85, 0xdd, 0xd4, 0xd2, 0xf5, 0x73, 0x66, 0x1b, 0x64, 0xf6,
	0xf1, 0x2f, 0x9b, 0x1d, 0x38, 0x26, 0x59, 0x2d, 0x7a, 0xcd, 0x0a, 0xc6, 0x8f, 0x59, 0xb1, 0x57,
	0x08, 0x63, 0x03, 0x69, 0xea, 0x6c, 0xba, 0x87, 0xe6, 0xee, 0x2f, 0xdb, 0x7c, 0x45, 0x44, 0x32,
	0xb9, 0x65, 0xaf, 0x43, 0xf8, 0xd6, 0xc2, 0x28, 0x84, 0x7f, 0xd6, 0x0a, 0xf2, 0x17, 0x4d, 0x03,
	0x81, 0x9f, 0xb4, 0x82, 0xee, 0xbf, 0x4b, 0xac, 0x42, 0x9d, 0xef, 0x1e, 0xbb, 0x3b, 0x1d, 0x58,
	0x03, 0x60, 0x57, 0xe7, 0x22, 0xef, 0x0e, 0x6f, 0xb2, 0xea, 0xf4, 0x8d, 0xb0, 0xe0, 0x95, 0xf8,
	0x3a, 0x6b, 0x4c, 0x7b, 0x3a, 0x49, 0x84, 0x89, 0xbd, 0x35, 0xde, 0x66, 0x6c, 0x3a, 0xd4, 0x49,
	0xd2, 0xd3, 0xda, 0x4e, 0xbc, 0x32, 0xe7, 0xac, 0x3d, 0xbd, 0x72, 0x20, 0xaf, 0xc2, 0xef, 0xb2,
	0xcd, 0xe9, 0xd5, 0x0f, 0xf7, 0xaa, 0x7c, 0x9b, 0x79, 0xd3, 0x6b, 0x4e, 0xf6, 0x6a, 0x64, 0xae,
	0x27, 0xa7, 0x30, 0x98, 0x08, 0x03, 0x5e, 0x9d, 0x36, 0x3b, 0x16, 0x66, 0x2a, 0xd5, 0xd8, 0x6b,
	0xf0, 0x1d, 0xb6, 0x35, 0x7d, 0xa7, 0xad, 0x36, 0xe7, 0x62, 0xf1, 0x7d, 0xa6, 0xdc, 0xe1, 0x9a,
	0xb4, 0x67, 0x4f, 0x9b, 0x18, 0x4c, 0x5f, 0x2b, 0x6b, 0x74, 0xe2, 0xb1, 0xce, 0xcf, 0x25, 0x56,
	0xa5, 0x27, 0x3c, 0xe6, 0x21, 0xb5, 0x32, 0xb3, 0x08, 0x23, 0x1c, 0x9e, 0xdc, 0xcb, 0xb6, 0x95,
	0x63, 0x7d, 0xbc, 0x33, 0x2b, 0x14, 0x7c, 0x2f, 0xe6, 0xcf, 0xa9, 0x82, 0x32, 0x84, 0x0b, 0xf7,
	0x44, 0xb2, 0xc2, 0x82, 0xb3, 0x51, 0xce, 0x9f, 0xb2, 0x88, 0x90, 0x85, 0xa5, 0x9a, 0xd6, 0x57,
	0x56, 0xd4, 0xb8, 0xba, 0xdb, 0xa7, 0x27, 0xd7, 0xea, 0x30, 0x8d, 0x0e, 0x3d, 0xd2, 0x0a, 0xbc,
	0x3b, 0xf4, 0x8d, 0xaf, 0xf1, 0x9b, 0x4c, 0xec, 0x95, 0xf8, 0x06, 0x6b, 0x4e, 0x7b, 0x22, 0x9a,
	0x9e, 0x3b, 0xff, 0x22, 0xaf, 0x47, 0xae, 0xed, 0xfe, 0x5c, 0x62, 0xcd, 0xe5, 0x13, 0x84, 0x78,
	0x85, 0x2f, 0xbc, 0x3b, 0x9c, 0xb1, 0xda, 0x74, 0x68, 0x32, 0x35, 0xcd, 0x23, 0x74, 0x6c, 0xe4,
	0x4c, 0x98, 0x45, 0x1e, 0xa1, 0x01, 0x44, 0x5a, 0xc5, 0x28, 0x97, 0x69, 0xe1, 0x10, 0x8c, 0x95,
	0x28, 0x56, 0xf8, 0x16, 0xdb, 0x98, 0x9e, 0x28, 0x7a, 0xff, 0xc8, 0x53, 0x09, 0xb1, 0x57, 0xe5,
	0x1e, 0x5b, 0x9f, 0x06, 0x80, 0x8d, 0x54, 0x59, 0x29, 0x12, 0xaf, 0x46, 0xa4, 0x01, 0x98, 0x33,
	0x19, 0xc1, 0x7b, 0x3b, 0x01, 0xe3, 0xd5, 0xbb, 0xff, 0x29, 0xb3, 0xf2, 0x49, 0x0a, 0xb4, 0x19,
	0x9e, 0xea, 0x24, 0x2d, 0xbe, 0x25, 0x10, 0xb3, 0x39, 0x4a, 0x25, 0x17, 0xf8, 0xcc, 0xa8, 0xfe,
	0x44, 0xe0, 0x30, 0x8f, 0xe0, 0x9a, 0xdb, 0xdf, 0x88, 0x68, 0x8a, 0x62, 0x99, 0x36, 0x7b, 0x89,
	0xd5, 0xf5, 0x5c, 0x2c, 0x10, 0xa9, 0x10, 0xe1, 0x45, 0x92, 0x00, 0x89, 0x2e, 0x51, 0xf2, 0x14,
	0x78, 0x21, 0xd3, 0x04, 0x10, 0xad, 0x51, 0xa6, 0xbe, 0x9a, 0x81, 0x19, 0x63, 0x75, 0x7f, 0x11,
	0x45, 0x90, 0xa6, 0xa8, 0xa8, 0xd3, 0x51, 0xc9, 0xde, 0x70, 0x62, 0x32, 0x84, 0x1a, 0xb4, 0x45,
	0x3f, 0x4b, 0x62, 0x48, 0x45, 0x84, 0x48, 0xd3, 0x21, 0x38, 0x6a, 0xe4, 0x9b, 0x6e, 0xd3, 0x2e,
	0xef, 0x30, 0xde, 0x42, 0x2a, 0x4c, 0x40, 0x44, 0x77, 0x88, 0x57, 0x8c, 0x16, 0x88, 0xf8, 0x7c,
	0x93, 0xb5, 0xa6, 0xaf, 0xb5, 0xb6, 0xf9, 0xc2, 0xfb, 0x74, 0xda, 0x81, 0x85, 0x39, 0x6d, 0xdf,
	0xc9, 0x13, 0xd6, 0x4e, 0x50, 0x7a, 0x40, 0x99, 0x79, 0x39, 0xfc, 0x22, 0xf6, 0x31, 0x1d, 0xb0,
	0x67, 0x64, 0xbc, 0xdc, 0xfc, 0x21, 0xd9, 0x20, 0xbf, 0xa2, 0xb8, 0x47, 0xe2, 0x6b, 0x30, 0x86,
	0xb4, 0x5f, 0xd0, 0x82, 0x40, 0xc8, 0x64, 0x09, 0x3d, 0xcd, 0xdd, 0x2c, 0xc9, 0xa3, 0x07, 0xbc,
	0xc5, 0xea, 0xd3, 0x5e, 0x46, 0x07, 0x78, 0xce, 0x7d, 0xb6, 0x3d, 0x75, 0x37, 0xaf, 0x98, 0x1c,
	0x34, 0x6d, 0xfc, 0x3b, 0xde, 0x61, 0x1f, 0x4d, 0x8b, 0xab, 0x76, 0x55, 0xf7, 0x35, 0xbf, 0xcf,
	0x76, 0x8a, 0xdb, 0x78, 0x55, 0xf5, 0xfb, 0xee, 0x5f, 0x58, 0x3d, 0x7f, 0xc1, 0x90, 0x3b, 0x8e,
	0xf1, 0xb9, 0x36, 0x98, 0xd1, 0x75, 0x77, 0x69, 0x47, 0x88, 0x57, 0x22, 0xd7, 0xd0, 0xef, 0x40,
	0x67, 0xe3, 0x49, 0x9e, 0x79, 0x7d, 0x3d, 0x9b, 0x8b, 0xc8, 0x42, 0xec, 0x95, 0x29, 0x97, 0x5f,
	0x4a, 0x63, 0xbd, 0x0a, 0x1d, 0xf9, 0x0d, 0x3d, 0x4d, 0xbc, 0x2a, 0xe1, 0xe8, 0x33, 0xaf, 0x46,
	0x36, 0x0e, 0x67, 0x73, 0x91, 0xa6, 0x62, 0x94, 0x80, 0x57, 0xef, 0xbe, 0x62, 0xec, 0xf2, 0x39,
	0x43, 0xdb, 0x51, 0x70, 0xbd, 0x3b, 0x6e, 0xbb, 0xa5, 0x6f, 0x8b, 0xc2, 0xe4, 0x26, 0x48, 0x6f,
	0x8d, 0xa4, 0xfc, 0x8b, 0xbc, 0x72, 0xf7, 0x4f, 0xac, 0xb5, 0xf2, 0x9e, 0xe1, 0x0d, 0x56, 0x99,
	0xf6, 0x85, 0xc9, 0xad, 0xd0, 0x35, 0x72, 0xeb, 0x9c, 0x95, 0x17, 0x99, 0xd5, 0xbd, 0x2c, 0xf5,
	0xd6, 0x8a, 0xd2, 0x15, 0x59, 0x6d, 0x86, 0x46, 0xc8, 0x04, 0x8c, 0x57, 0xa6, 0x80, 0xd0, 0x9a,
	0x41, 0xa4, 0xb5, 0x05, 0xe3, 0x55, 0xba, 0xdf, 0xb0, 0xf6, 0xd5, 0x47, 0x0e, 0x7d, 0x14, 0x26,
	0x4a, 0xbe, 0xc7, 0x8f, 0x13, 0x80, 0x24, 0x9a, 0x08, 0x69, 0xbc, 0x12, 0x7d, 0xfd, 0x00, 0xc6,
	0x78, 0x73, 0xd7, 0xba, 0xdf, 0xb2, 0xd6, 0xca, 0x8b, 0x86, 0xd6, 0xe1, 0x7d, 0xca, 0x9d, 0xdb,
	0x37, 0x3a, 0x4d, 0xf3, 0x25, 0xdf, 0x2d, 0xf0, 0xf1, 0x9b, 0x5f, 0xa1, 0x22, 0x59, 0xbd, 0x72,
	0xd7, 0xb0, 0xd6, 0xca, 0x5b, 0x86, 0x2c, 0x0c, 0x8d, 0x98, 0xe5, 0x16, 0xde, 0x81, 0x35, 0xda,
	0x2b, 0x39, 0xc3, 0x42, 0x26, 0xde, 0x1a, 0x7d, 0x3e, 0x7e, 0x5f, 0x99, 0x08, 0x94, 0x57, 0xf9,
	0xbd, 0xeb, 0xa3, 0xdb, 0xd1, 0x33, 0x55, 0x72, 0xc4, 0x1b, 0xad, 0x62, 0x9d, 0x88, 0xbc, 0x30,
	0xbf, 0xce, 0x94, 0x8c, 0xb2, 0x44, 0xe0, 0xf5, 0xff, 0x9e, 0x35, 0x97, 0xc3, 0x3d, 0xe5, 0xc5,
	0x91, 0x5e, 0xca, 0xde, 0x1d, 0xf7, 0x85, 0x58, 0xc3, 0x31, 0x31, 0x70, 0xed, 0x4b, 0x88, 0x65,
	0x24, 0x30, 0x0f, 0x8a, 0x8a, 0x34, 0x17, 0x86, 0xe4, 0x72, 0xb7, 0xc7, 0x1a, 0xc5, 0x25, 0x23,
	0x5f, 0x1d, 0xe9, 0x42, 0xcc, 0x3b, 0xcf, 0x5b, 0x38, 0xb5, 0x5e, 0x89, 0x0e, 0x4b, 0x8f, 0xef,
	0xdc, 0x06, 0xd6, 0x45, 0x64, 0xa6, 0x5e, 0xb9, 0xf7, 0xd5, 0x4f, 0xfb, 0x63, 0x69, 0x27, 0xd9,
	0x68, 0x3f, 0xd2, 0xb3, 0x67, 0x99, 0x92, 0x16, 0xe2, 0x2f, 0x69, 0x6a, 0x33, 0xe9, 0xb3, 0xa2,
	0x5f, 0x3e, 0x9b, 0x8f, 0x9e, 0x15, 0xff, 0x8a, 0x1f, 0xdf, 0xf9, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x2a, 0x10, 0xae, 0x74, 0x22, 0x17, 0x00, 0x00,
}
