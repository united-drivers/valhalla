// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trippath.proto

/*
Package trippath is a generated protocol buffer package.

It is generated from these files:
	trippath.proto

It has these top-level messages:
	TripPath
*/
package trippath

import go_proto_validators "github.com/mwitkow/go-proto-validators"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/united-drivers/valhalla/pb/tripcommon"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *TripPath) Validate() error {
	for _, item := range this.Location {
		if err := go_proto_validators.CallValidatorIfExists(&(*(item))); err != nil {
			return go_proto_validators.FieldError("Location", err)
		}
	}
	for _, item := range this.Node {
		if err := go_proto_validators.CallValidatorIfExists(&(*(item))); err != nil {
			return go_proto_validators.FieldError("Node", err)
		}
	}
	for _, item := range this.Admin {
		if err := go_proto_validators.CallValidatorIfExists(&(*(item))); err != nil {
			return go_proto_validators.FieldError("Admin", err)
		}
	}
	if this.Bbox != nil {
		if err := go_proto_validators.CallValidatorIfExists(&(*(this.Bbox))); err != nil {
			return go_proto_validators.FieldError("Bbox", err)
		}
	}
	return nil
}
func (this *TripPath_Sign) Validate() error {
	return nil
}
func (this *TripPath_TransitRouteInfo) Validate() error {
	return nil
}
func (this *TripPath_LaneConnectivity) Validate() error {
	return nil
}
func (this *TripPath_TrafficSegment) Validate() error {
	return nil
}
func (this *TripPath_Edge) Validate() error {
	if this.Sign != nil {
		if err := go_proto_validators.CallValidatorIfExists(&(*(this.Sign))); err != nil {
			return go_proto_validators.FieldError("Sign", err)
		}
	}
	if this.TransitRouteInfo != nil {
		if err := go_proto_validators.CallValidatorIfExists(&(*(this.TransitRouteInfo))); err != nil {
			return go_proto_validators.FieldError("TransitRouteInfo", err)
		}
	}
	for _, item := range this.LaneConnectivity {
		if err := go_proto_validators.CallValidatorIfExists(&(*(item))); err != nil {
			return go_proto_validators.FieldError("LaneConnectivity", err)
		}
	}
	for _, item := range this.TrafficSegment {
		if err := go_proto_validators.CallValidatorIfExists(&(*(item))); err != nil {
			return go_proto_validators.FieldError("TrafficSegment", err)
		}
	}
	return nil
}
func (this *TripPath_IntersectingEdge) Validate() error {
	return nil
}
func (this *TripPath_Node) Validate() error {
	if this.Edge != nil {
		if err := go_proto_validators.CallValidatorIfExists(&(*(this.Edge))); err != nil {
			return go_proto_validators.FieldError("Edge", err)
		}
	}
	for _, item := range this.IntersectingEdge {
		if err := go_proto_validators.CallValidatorIfExists(&(*(item))); err != nil {
			return go_proto_validators.FieldError("IntersectingEdge", err)
		}
	}
	if this.TransitPlatformInfo != nil {
		if err := go_proto_validators.CallValidatorIfExists(&(*(this.TransitPlatformInfo))); err != nil {
			return go_proto_validators.FieldError("TransitPlatformInfo", err)
		}
	}
	if this.TransitStationInfo != nil {
		if err := go_proto_validators.CallValidatorIfExists(&(*(this.TransitStationInfo))); err != nil {
			return go_proto_validators.FieldError("TransitStationInfo", err)
		}
	}
	if this.TransitEgressInfo != nil {
		if err := go_proto_validators.CallValidatorIfExists(&(*(this.TransitEgressInfo))); err != nil {
			return go_proto_validators.FieldError("TransitEgressInfo", err)
		}
	}
	return nil
}
func (this *TripPath_Admin) Validate() error {
	return nil
}
