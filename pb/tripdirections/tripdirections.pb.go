// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tripdirections.proto

/*
Package tripdirections is a generated protocol buffer package.

It is generated from these files:
	tripdirections.proto

It has these top-level messages:
	TripDirections
*/
package tripdirections

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import valhalla_odin "github.com/united-drivers/valhalla/pb/tripcommon"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// LatLng from public import tripcommon.proto
type LatLng valhalla_odin.LatLng

func (m *LatLng) Reset()          { (*valhalla_odin.LatLng)(m).Reset() }
func (m *LatLng) String() string  { return (*valhalla_odin.LatLng)(m).String() }
func (*LatLng) ProtoMessage()     {}
func (m *LatLng) GetLat() float32 { return (*valhalla_odin.LatLng)(m).GetLat() }
func (m *LatLng) GetLng() float32 { return (*valhalla_odin.LatLng)(m).GetLng() }

// BoundingBox from public import tripcommon.proto
type BoundingBox valhalla_odin.BoundingBox

func (m *BoundingBox) Reset()            { (*valhalla_odin.BoundingBox)(m).Reset() }
func (m *BoundingBox) String() string    { return (*valhalla_odin.BoundingBox)(m).String() }
func (*BoundingBox) ProtoMessage()       {}
func (m *BoundingBox) GetMinLl() *LatLng { return (*LatLng)((*valhalla_odin.BoundingBox)(m).GetMinLl()) }
func (m *BoundingBox) GetMaxLl() *LatLng { return (*LatLng)((*valhalla_odin.BoundingBox)(m).GetMaxLl()) }

// Location from public import tripcommon.proto
const Default_Location_Type = valhalla_odin.Default_Location_Type
const Default_Location_HeadingTolerance = valhalla_odin.Default_Location_HeadingTolerance
const Default_Location_NodeSnapTolerance = valhalla_odin.Default_Location_NodeSnapTolerance
const Default_Location_MinimumReachability = valhalla_odin.Default_Location_MinimumReachability
const Default_Location_Radius = valhalla_odin.Default_Location_Radius
const Default_Location_Time = valhalla_odin.Default_Location_Time
const Default_Location_RankCandidates = valhalla_odin.Default_Location_RankCandidates

type Location valhalla_odin.Location

func (m *Location) Reset()         { (*valhalla_odin.Location)(m).Reset() }
func (m *Location) String() string { return (*valhalla_odin.Location)(m).String() }
func (*Location) ProtoMessage()    {}
func (m *Location) GetLl() *LatLng { return (*LatLng)((*valhalla_odin.Location)(m).GetLl()) }
func (m *Location) GetType() Location_Type {
	return (Location_Type)((*valhalla_odin.Location)(m).GetType())
}
func (m *Location) GetHeading() uint32    { return (*valhalla_odin.Location)(m).GetHeading() }
func (m *Location) GetName() string       { return (*valhalla_odin.Location)(m).GetName() }
func (m *Location) GetStreet() string     { return (*valhalla_odin.Location)(m).GetStreet() }
func (m *Location) GetCity() string       { return (*valhalla_odin.Location)(m).GetCity() }
func (m *Location) GetState() string      { return (*valhalla_odin.Location)(m).GetState() }
func (m *Location) GetPostalCode() string { return (*valhalla_odin.Location)(m).GetPostalCode() }
func (m *Location) GetCountry() string    { return (*valhalla_odin.Location)(m).GetCountry() }
func (m *Location) GetPhone() string      { return (*valhalla_odin.Location)(m).GetPhone() }
func (m *Location) GetUrl() string        { return (*valhalla_odin.Location)(m).GetUrl() }
func (m *Location) GetDateTime() string   { return (*valhalla_odin.Location)(m).GetDateTime() }
func (m *Location) GetSideOfStreet() Location_SideOfStreet {
	return (Location_SideOfStreet)((*valhalla_odin.Location)(m).GetSideOfStreet())
}
func (m *Location) GetHeadingTolerance() uint32 {
	return (*valhalla_odin.Location)(m).GetHeadingTolerance()
}
func (m *Location) GetNodeSnapTolerance() uint32 {
	return (*valhalla_odin.Location)(m).GetNodeSnapTolerance()
}
func (m *Location) GetWayId() uint64 { return (*valhalla_odin.Location)(m).GetWayId() }
func (m *Location) GetMinimumReachability() uint32 {
	return (*valhalla_odin.Location)(m).GetMinimumReachability()
}
func (m *Location) GetRadius() uint32       { return (*valhalla_odin.Location)(m).GetRadius() }
func (m *Location) GetAccuracy() uint32     { return (*valhalla_odin.Location)(m).GetAccuracy() }
func (m *Location) GetTime() float64        { return (*valhalla_odin.Location)(m).GetTime() }
func (m *Location) GetRankCandidates() bool { return (*valhalla_odin.Location)(m).GetRankCandidates() }
func (m *Location) GetPathEdges() []*Location_PathEdge {
	o := (*valhalla_odin.Location)(m).GetPathEdges()
	if o == nil {
		return nil
	}
	s := make([]*Location_PathEdge, len(o))
	for i, x := range o {
		s[i] = (*Location_PathEdge)(x)
	}
	return s
}
func (m *Location) GetFilteredEdges() []*Location_PathEdge {
	o := (*valhalla_odin.Location)(m).GetFilteredEdges()
	if o == nil {
		return nil
	}
	s := make([]*Location_PathEdge, len(o))
	for i, x := range o {
		s[i] = (*Location_PathEdge)(x)
	}
	return s
}
func (m *Location) GetOriginalIndex() uint32 { return (*valhalla_odin.Location)(m).GetOriginalIndex() }
func (m *Location) GetProjectedLl() *LatLng {
	return (*LatLng)((*valhalla_odin.Location)(m).GetProjectedLl())
}

// PathEdge from public import tripcommon.proto
type Location_PathEdge valhalla_odin.Location_PathEdge

func (m *Location_PathEdge) Reset()         { (*valhalla_odin.Location_PathEdge)(m).Reset() }
func (m *Location_PathEdge) String() string { return (*valhalla_odin.Location_PathEdge)(m).String() }
func (*Location_PathEdge) ProtoMessage()    {}
func (m *Location_PathEdge) GetGraphId() uint64 {
	return (*valhalla_odin.Location_PathEdge)(m).GetGraphId()
}
func (m *Location_PathEdge) GetPercentAlong() float32 {
	return (*valhalla_odin.Location_PathEdge)(m).GetPercentAlong()
}
func (m *Location_PathEdge) GetLl() *LatLng {
	return (*LatLng)((*valhalla_odin.Location_PathEdge)(m).GetLl())
}
func (m *Location_PathEdge) GetSideOfStreet() Location_SideOfStreet {
	return (Location_SideOfStreet)((*valhalla_odin.Location_PathEdge)(m).GetSideOfStreet())
}
func (m *Location_PathEdge) GetDistance() float32 {
	return (*valhalla_odin.Location_PathEdge)(m).GetDistance()
}
func (m *Location_PathEdge) GetMinimumReachability() int32 {
	return (*valhalla_odin.Location_PathEdge)(m).GetMinimumReachability()
}
func (m *Location_PathEdge) GetBeginNode() bool {
	return (*valhalla_odin.Location_PathEdge)(m).GetBeginNode()
}
func (m *Location_PathEdge) GetEndNode() bool {
	return (*valhalla_odin.Location_PathEdge)(m).GetEndNode()
}
func (m *Location_PathEdge) GetNames() []string {
	return (*valhalla_odin.Location_PathEdge)(m).GetNames()
}

// TransitEgressInfo from public import tripcommon.proto
type TransitEgressInfo valhalla_odin.TransitEgressInfo

func (m *TransitEgressInfo) Reset()         { (*valhalla_odin.TransitEgressInfo)(m).Reset() }
func (m *TransitEgressInfo) String() string { return (*valhalla_odin.TransitEgressInfo)(m).String() }
func (*TransitEgressInfo) ProtoMessage()    {}
func (m *TransitEgressInfo) GetOnestopId() string {
	return (*valhalla_odin.TransitEgressInfo)(m).GetOnestopId()
}
func (m *TransitEgressInfo) GetName() string { return (*valhalla_odin.TransitEgressInfo)(m).GetName() }
func (m *TransitEgressInfo) GetLl() *LatLng {
	return (*LatLng)((*valhalla_odin.TransitEgressInfo)(m).GetLl())
}

// TransitStationInfo from public import tripcommon.proto
type TransitStationInfo valhalla_odin.TransitStationInfo

func (m *TransitStationInfo) Reset()         { (*valhalla_odin.TransitStationInfo)(m).Reset() }
func (m *TransitStationInfo) String() string { return (*valhalla_odin.TransitStationInfo)(m).String() }
func (*TransitStationInfo) ProtoMessage()    {}
func (m *TransitStationInfo) GetOnestopId() string {
	return (*valhalla_odin.TransitStationInfo)(m).GetOnestopId()
}
func (m *TransitStationInfo) GetName() string { return (*valhalla_odin.TransitStationInfo)(m).GetName() }
func (m *TransitStationInfo) GetLl() *LatLng {
	return (*LatLng)((*valhalla_odin.TransitStationInfo)(m).GetLl())
}

// TransitPlatformInfo from public import tripcommon.proto
type TransitPlatformInfo valhalla_odin.TransitPlatformInfo

func (m *TransitPlatformInfo) Reset()         { (*valhalla_odin.TransitPlatformInfo)(m).Reset() }
func (m *TransitPlatformInfo) String() string { return (*valhalla_odin.TransitPlatformInfo)(m).String() }
func (*TransitPlatformInfo) ProtoMessage()    {}
func (m *TransitPlatformInfo) GetType() TransitPlatformInfo_Type {
	return (TransitPlatformInfo_Type)((*valhalla_odin.TransitPlatformInfo)(m).GetType())
}
func (m *TransitPlatformInfo) GetOnestopId() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetOnestopId()
}
func (m *TransitPlatformInfo) GetName() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetName()
}
func (m *TransitPlatformInfo) GetArrivalDateTime() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetArrivalDateTime()
}
func (m *TransitPlatformInfo) GetDepartureDateTime() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetDepartureDateTime()
}
func (m *TransitPlatformInfo) GetAssumedSchedule() bool {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetAssumedSchedule()
}
func (m *TransitPlatformInfo) GetLl() *LatLng {
	return (*LatLng)((*valhalla_odin.TransitPlatformInfo)(m).GetLl())
}
func (m *TransitPlatformInfo) GetStationOnestopId() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetStationOnestopId()
}
func (m *TransitPlatformInfo) GetStationName() string {
	return (*valhalla_odin.TransitPlatformInfo)(m).GetStationName()
}

// Type from public import tripcommon.proto
type Location_Type valhalla_odin.Location_Type

var Location_Type_name = valhalla_odin.Location_Type_name
var Location_Type_value = valhalla_odin.Location_Type_value

func (x Location_Type) String() string { return (valhalla_odin.Location_Type)(x).String() }
func (x Location_Type) Enum() *Location_Type {
	return (*Location_Type)((valhalla_odin.Location_Type)(x).Enum())
}
func (x *Location_Type) UnmarshalJSON(data []byte) error {
	return (*valhalla_odin.Location_Type)(x).UnmarshalJSON(data)
}

const Location_kBreak = Location_Type(valhalla_odin.Location_kBreak)
const Location_kThrough = Location_Type(valhalla_odin.Location_kThrough)

// SideOfStreet from public import tripcommon.proto
type Location_SideOfStreet valhalla_odin.Location_SideOfStreet

var Location_SideOfStreet_name = valhalla_odin.Location_SideOfStreet_name
var Location_SideOfStreet_value = valhalla_odin.Location_SideOfStreet_value

func (x Location_SideOfStreet) String() string {
	return (valhalla_odin.Location_SideOfStreet)(x).String()
}
func (x Location_SideOfStreet) Enum() *Location_SideOfStreet {
	return (*Location_SideOfStreet)((valhalla_odin.Location_SideOfStreet)(x).Enum())
}
func (x *Location_SideOfStreet) UnmarshalJSON(data []byte) error {
	return (*valhalla_odin.Location_SideOfStreet)(x).UnmarshalJSON(data)
}

const Location_kNone = Location_SideOfStreet(valhalla_odin.Location_kNone)
const Location_kLeft = Location_SideOfStreet(valhalla_odin.Location_kLeft)
const Location_kRight = Location_SideOfStreet(valhalla_odin.Location_kRight)

// Type from public import tripcommon.proto
type TransitPlatformInfo_Type valhalla_odin.TransitPlatformInfo_Type

var TransitPlatformInfo_Type_name = valhalla_odin.TransitPlatformInfo_Type_name
var TransitPlatformInfo_Type_value = valhalla_odin.TransitPlatformInfo_Type_value

func (x TransitPlatformInfo_Type) String() string {
	return (valhalla_odin.TransitPlatformInfo_Type)(x).String()
}
func (x TransitPlatformInfo_Type) Enum() *TransitPlatformInfo_Type {
	return (*TransitPlatformInfo_Type)((valhalla_odin.TransitPlatformInfo_Type)(x).Enum())
}
func (x *TransitPlatformInfo_Type) UnmarshalJSON(data []byte) error {
	return (*valhalla_odin.TransitPlatformInfo_Type)(x).UnmarshalJSON(data)
}

const TransitPlatformInfo_kStop = TransitPlatformInfo_Type(valhalla_odin.TransitPlatformInfo_kStop)
const TransitPlatformInfo_kStation = TransitPlatformInfo_Type(valhalla_odin.TransitPlatformInfo_kStation)

type TripDirections_TravelMode int32

const (
	TripDirections_kDrive      TripDirections_TravelMode = 0
	TripDirections_kPedestrian TripDirections_TravelMode = 1
	TripDirections_kBicycle    TripDirections_TravelMode = 2
	TripDirections_kTransit    TripDirections_TravelMode = 3
)

var TripDirections_TravelMode_name = map[int32]string{
	0: "kDrive",
	1: "kPedestrian",
	2: "kBicycle",
	3: "kTransit",
}
var TripDirections_TravelMode_value = map[string]int32{
	"kDrive":      0,
	"kPedestrian": 1,
	"kBicycle":    2,
	"kTransit":    3,
}

func (x TripDirections_TravelMode) Enum() *TripDirections_TravelMode {
	p := new(TripDirections_TravelMode)
	*p = x
	return p
}
func (x TripDirections_TravelMode) String() string {
	return proto.EnumName(TripDirections_TravelMode_name, int32(x))
}
func (x *TripDirections_TravelMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripDirections_TravelMode_value, data, "TripDirections_TravelMode")
	if err != nil {
		return err
	}
	*x = TripDirections_TravelMode(value)
	return nil
}
func (TripDirections_TravelMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 0}
}

// TODO: review and update as needed
type TripDirections_VehicleType int32

const (
	TripDirections_kCar            TripDirections_VehicleType = 0
	TripDirections_kMotorcycle     TripDirections_VehicleType = 1
	TripDirections_kAutoBus        TripDirections_VehicleType = 2
	TripDirections_kTractorTrailer TripDirections_VehicleType = 3
	TripDirections_kMotorScooter   TripDirections_VehicleType = 4
)

var TripDirections_VehicleType_name = map[int32]string{
	0: "kCar",
	1: "kMotorcycle",
	2: "kAutoBus",
	3: "kTractorTrailer",
	4: "kMotorScooter",
}
var TripDirections_VehicleType_value = map[string]int32{
	"kCar":            0,
	"kMotorcycle":     1,
	"kAutoBus":        2,
	"kTractorTrailer": 3,
	"kMotorScooter":   4,
}

func (x TripDirections_VehicleType) Enum() *TripDirections_VehicleType {
	p := new(TripDirections_VehicleType)
	*p = x
	return p
}
func (x TripDirections_VehicleType) String() string {
	return proto.EnumName(TripDirections_VehicleType_name, int32(x))
}
func (x *TripDirections_VehicleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripDirections_VehicleType_value, data, "TripDirections_VehicleType")
	if err != nil {
		return err
	}
	*x = TripDirections_VehicleType(value)
	return nil
}
func (TripDirections_VehicleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 1}
}

// TODO: review and update as needed
type TripDirections_PedestrianType int32

const (
	TripDirections_kFoot       TripDirections_PedestrianType = 0
	TripDirections_kWheelchair TripDirections_PedestrianType = 1
	TripDirections_kSegway     TripDirections_PedestrianType = 2
)

var TripDirections_PedestrianType_name = map[int32]string{
	0: "kFoot",
	1: "kWheelchair",
	2: "kSegway",
}
var TripDirections_PedestrianType_value = map[string]int32{
	"kFoot":       0,
	"kWheelchair": 1,
	"kSegway":     2,
}

func (x TripDirections_PedestrianType) Enum() *TripDirections_PedestrianType {
	p := new(TripDirections_PedestrianType)
	*p = x
	return p
}
func (x TripDirections_PedestrianType) String() string {
	return proto.EnumName(TripDirections_PedestrianType_name, int32(x))
}
func (x *TripDirections_PedestrianType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripDirections_PedestrianType_value, data, "TripDirections_PedestrianType")
	if err != nil {
		return err
	}
	*x = TripDirections_PedestrianType(value)
	return nil
}
func (TripDirections_PedestrianType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 2}
}

type TripDirections_BicycleType int32

const (
	TripDirections_kRoad     TripDirections_BicycleType = 0
	TripDirections_kCross    TripDirections_BicycleType = 1
	TripDirections_kHybrid   TripDirections_BicycleType = 2
	TripDirections_kMountain TripDirections_BicycleType = 3
)

var TripDirections_BicycleType_name = map[int32]string{
	0: "kRoad",
	1: "kCross",
	2: "kHybrid",
	3: "kMountain",
}
var TripDirections_BicycleType_value = map[string]int32{
	"kRoad":     0,
	"kCross":    1,
	"kHybrid":   2,
	"kMountain": 3,
}

func (x TripDirections_BicycleType) Enum() *TripDirections_BicycleType {
	p := new(TripDirections_BicycleType)
	*p = x
	return p
}
func (x TripDirections_BicycleType) String() string {
	return proto.EnumName(TripDirections_BicycleType_name, int32(x))
}
func (x *TripDirections_BicycleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripDirections_BicycleType_value, data, "TripDirections_BicycleType")
	if err != nil {
		return err
	}
	*x = TripDirections_BicycleType(value)
	return nil
}
func (TripDirections_BicycleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 3}
}

type TripDirections_TransitType int32

const (
	TripDirections_kTram      TripDirections_TransitType = 0
	TripDirections_kMetro     TripDirections_TransitType = 1
	TripDirections_kRail      TripDirections_TransitType = 2
	TripDirections_kBus       TripDirections_TransitType = 3
	TripDirections_kFerry     TripDirections_TransitType = 4
	TripDirections_kCableCar  TripDirections_TransitType = 5
	TripDirections_kGondola   TripDirections_TransitType = 6
	TripDirections_kFunicular TripDirections_TransitType = 7
)

var TripDirections_TransitType_name = map[int32]string{
	0: "kTram",
	1: "kMetro",
	2: "kRail",
	3: "kBus",
	4: "kFerry",
	5: "kCableCar",
	6: "kGondola",
	7: "kFunicular",
}
var TripDirections_TransitType_value = map[string]int32{
	"kTram":      0,
	"kMetro":     1,
	"kRail":      2,
	"kBus":       3,
	"kFerry":     4,
	"kCableCar":  5,
	"kGondola":   6,
	"kFunicular": 7,
}

func (x TripDirections_TransitType) Enum() *TripDirections_TransitType {
	p := new(TripDirections_TransitType)
	*p = x
	return p
}
func (x TripDirections_TransitType) String() string {
	return proto.EnumName(TripDirections_TransitType_name, int32(x))
}
func (x *TripDirections_TransitType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripDirections_TransitType_value, data, "TripDirections_TransitType")
	if err != nil {
		return err
	}
	*x = TripDirections_TransitType(value)
	return nil
}
func (TripDirections_TransitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 4}
}

type TripDirections_Maneuver_CardinalDirection int32

const (
	TripDirections_Maneuver_kNorth     TripDirections_Maneuver_CardinalDirection = 0
	TripDirections_Maneuver_kNorthEast TripDirections_Maneuver_CardinalDirection = 1
	TripDirections_Maneuver_kEast      TripDirections_Maneuver_CardinalDirection = 2
	TripDirections_Maneuver_kSouthEast TripDirections_Maneuver_CardinalDirection = 3
	TripDirections_Maneuver_kSouth     TripDirections_Maneuver_CardinalDirection = 4
	TripDirections_Maneuver_kSouthWest TripDirections_Maneuver_CardinalDirection = 5
	TripDirections_Maneuver_kWest      TripDirections_Maneuver_CardinalDirection = 6
	TripDirections_Maneuver_kNorthWest TripDirections_Maneuver_CardinalDirection = 7
)

var TripDirections_Maneuver_CardinalDirection_name = map[int32]string{
	0: "kNorth",
	1: "kNorthEast",
	2: "kEast",
	3: "kSouthEast",
	4: "kSouth",
	5: "kSouthWest",
	6: "kWest",
	7: "kNorthWest",
}
var TripDirections_Maneuver_CardinalDirection_value = map[string]int32{
	"kNorth":     0,
	"kNorthEast": 1,
	"kEast":      2,
	"kSouthEast": 3,
	"kSouth":     4,
	"kSouthWest": 5,
	"kWest":      6,
	"kNorthWest": 7,
}

func (x TripDirections_Maneuver_CardinalDirection) Enum() *TripDirections_Maneuver_CardinalDirection {
	p := new(TripDirections_Maneuver_CardinalDirection)
	*p = x
	return p
}
func (x TripDirections_Maneuver_CardinalDirection) String() string {
	return proto.EnumName(TripDirections_Maneuver_CardinalDirection_name, int32(x))
}
func (x *TripDirections_Maneuver_CardinalDirection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripDirections_Maneuver_CardinalDirection_value, data, "TripDirections_Maneuver_CardinalDirection")
	if err != nil {
		return err
	}
	*x = TripDirections_Maneuver_CardinalDirection(value)
	return nil
}
func (TripDirections_Maneuver_CardinalDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 2, 0}
}

// TODO - add others later
type TripDirections_Maneuver_Type int32

const (
	TripDirections_Maneuver_kNone                             TripDirections_Maneuver_Type = 0
	TripDirections_Maneuver_kStart                            TripDirections_Maneuver_Type = 1
	TripDirections_Maneuver_kStartRight                       TripDirections_Maneuver_Type = 2
	TripDirections_Maneuver_kStartLeft                        TripDirections_Maneuver_Type = 3
	TripDirections_Maneuver_kDestination                      TripDirections_Maneuver_Type = 4
	TripDirections_Maneuver_kDestinationRight                 TripDirections_Maneuver_Type = 5
	TripDirections_Maneuver_kDestinationLeft                  TripDirections_Maneuver_Type = 6
	TripDirections_Maneuver_kBecomes                          TripDirections_Maneuver_Type = 7
	TripDirections_Maneuver_kContinue                         TripDirections_Maneuver_Type = 8
	TripDirections_Maneuver_kSlightRight                      TripDirections_Maneuver_Type = 9
	TripDirections_Maneuver_kRight                            TripDirections_Maneuver_Type = 10
	TripDirections_Maneuver_kSharpRight                       TripDirections_Maneuver_Type = 11
	TripDirections_Maneuver_kUturnRight                       TripDirections_Maneuver_Type = 12
	TripDirections_Maneuver_kUturnLeft                        TripDirections_Maneuver_Type = 13
	TripDirections_Maneuver_kSharpLeft                        TripDirections_Maneuver_Type = 14
	TripDirections_Maneuver_kLeft                             TripDirections_Maneuver_Type = 15
	TripDirections_Maneuver_kSlightLeft                       TripDirections_Maneuver_Type = 16
	TripDirections_Maneuver_kRampStraight                     TripDirections_Maneuver_Type = 17
	TripDirections_Maneuver_kRampRight                        TripDirections_Maneuver_Type = 18
	TripDirections_Maneuver_kRampLeft                         TripDirections_Maneuver_Type = 19
	TripDirections_Maneuver_kExitRight                        TripDirections_Maneuver_Type = 20
	TripDirections_Maneuver_kExitLeft                         TripDirections_Maneuver_Type = 21
	TripDirections_Maneuver_kStayStraight                     TripDirections_Maneuver_Type = 22
	TripDirections_Maneuver_kStayRight                        TripDirections_Maneuver_Type = 23
	TripDirections_Maneuver_kStayLeft                         TripDirections_Maneuver_Type = 24
	TripDirections_Maneuver_kMerge                            TripDirections_Maneuver_Type = 25
	TripDirections_Maneuver_kRoundaboutEnter                  TripDirections_Maneuver_Type = 26
	TripDirections_Maneuver_kRoundaboutExit                   TripDirections_Maneuver_Type = 27
	TripDirections_Maneuver_kFerryEnter                       TripDirections_Maneuver_Type = 28
	TripDirections_Maneuver_kFerryExit                        TripDirections_Maneuver_Type = 29
	TripDirections_Maneuver_kTransit                          TripDirections_Maneuver_Type = 30
	TripDirections_Maneuver_kTransitTransfer                  TripDirections_Maneuver_Type = 31
	TripDirections_Maneuver_kTransitRemainOn                  TripDirections_Maneuver_Type = 32
	TripDirections_Maneuver_kTransitConnectionStart           TripDirections_Maneuver_Type = 33
	TripDirections_Maneuver_kTransitConnectionTransfer        TripDirections_Maneuver_Type = 34
	TripDirections_Maneuver_kTransitConnectionDestination     TripDirections_Maneuver_Type = 35
	TripDirections_Maneuver_kPostTransitConnectionDestination TripDirections_Maneuver_Type = 36
)

var TripDirections_Maneuver_Type_name = map[int32]string{
	0:  "kNone",
	1:  "kStart",
	2:  "kStartRight",
	3:  "kStartLeft",
	4:  "kDestination",
	5:  "kDestinationRight",
	6:  "kDestinationLeft",
	7:  "kBecomes",
	8:  "kContinue",
	9:  "kSlightRight",
	10: "kRight",
	11: "kSharpRight",
	12: "kUturnRight",
	13: "kUturnLeft",
	14: "kSharpLeft",
	15: "kLeft",
	16: "kSlightLeft",
	17: "kRampStraight",
	18: "kRampRight",
	19: "kRampLeft",
	20: "kExitRight",
	21: "kExitLeft",
	22: "kStayStraight",
	23: "kStayRight",
	24: "kStayLeft",
	25: "kMerge",
	26: "kRoundaboutEnter",
	27: "kRoundaboutExit",
	28: "kFerryEnter",
	29: "kFerryExit",
	30: "kTransit",
	31: "kTransitTransfer",
	32: "kTransitRemainOn",
	33: "kTransitConnectionStart",
	34: "kTransitConnectionTransfer",
	35: "kTransitConnectionDestination",
	36: "kPostTransitConnectionDestination",
}
var TripDirections_Maneuver_Type_value = map[string]int32{
	"kNone":                             0,
	"kStart":                            1,
	"kStartRight":                       2,
	"kStartLeft":                        3,
	"kDestination":                      4,
	"kDestinationRight":                 5,
	"kDestinationLeft":                  6,
	"kBecomes":                          7,
	"kContinue":                         8,
	"kSlightRight":                      9,
	"kRight":                            10,
	"kSharpRight":                       11,
	"kUturnRight":                       12,
	"kUturnLeft":                        13,
	"kSharpLeft":                        14,
	"kLeft":                             15,
	"kSlightLeft":                       16,
	"kRampStraight":                     17,
	"kRampRight":                        18,
	"kRampLeft":                         19,
	"kExitRight":                        20,
	"kExitLeft":                         21,
	"kStayStraight":                     22,
	"kStayRight":                        23,
	"kStayLeft":                         24,
	"kMerge":                            25,
	"kRoundaboutEnter":                  26,
	"kRoundaboutExit":                   27,
	"kFerryEnter":                       28,
	"kFerryExit":                        29,
	"kTransit":                          30,
	"kTransitTransfer":                  31,
	"kTransitRemainOn":                  32,
	"kTransitConnectionStart":           33,
	"kTransitConnectionTransfer":        34,
	"kTransitConnectionDestination":     35,
	"kPostTransitConnectionDestination": 36,
}

func (x TripDirections_Maneuver_Type) Enum() *TripDirections_Maneuver_Type {
	p := new(TripDirections_Maneuver_Type)
	*p = x
	return p
}
func (x TripDirections_Maneuver_Type) String() string {
	return proto.EnumName(TripDirections_Maneuver_Type_name, int32(x))
}
func (x *TripDirections_Maneuver_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TripDirections_Maneuver_Type_value, data, "TripDirections_Maneuver_Type")
	if err != nil {
		return err
	}
	*x = TripDirections_Maneuver_Type(value)
	return nil
}
func (TripDirections_Maneuver_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 2, 1}
}

type TripDirections struct {
	TripId           *uint64                    `protobuf:"varint,1,opt,name=trip_id,json=tripId" json:"trip_id,omitempty"`
	LegId            *uint32                    `protobuf:"varint,2,opt,name=leg_id,json=legId" json:"leg_id,omitempty"`
	LegCount         *uint32                    `protobuf:"varint,3,opt,name=leg_count,json=legCount" json:"leg_count,omitempty"`
	Location         []*valhalla_odin.Location  `protobuf:"bytes,4,rep,name=location" json:"location,omitempty"`
	Summary          *TripDirections_Summary    `protobuf:"bytes,5,opt,name=summary" json:"summary,omitempty"`
	Maneuver         []*TripDirections_Maneuver `protobuf:"bytes,6,rep,name=maneuver" json:"maneuver,omitempty"`
	Shape            *string                    `protobuf:"bytes,7,opt,name=shape" json:"shape,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *TripDirections) Reset()                    { *m = TripDirections{} }
func (m *TripDirections) String() string            { return proto.CompactTextString(m) }
func (*TripDirections) ProtoMessage()               {}
func (*TripDirections) Descriptor() ([]byte, []int) { return fileDescriptorTripdirections, []int{0} }

func (m *TripDirections) GetTripId() uint64 {
	if m != nil && m.TripId != nil {
		return *m.TripId
	}
	return 0
}

func (m *TripDirections) GetLegId() uint32 {
	if m != nil && m.LegId != nil {
		return *m.LegId
	}
	return 0
}

func (m *TripDirections) GetLegCount() uint32 {
	if m != nil && m.LegCount != nil {
		return *m.LegCount
	}
	return 0
}

func (m *TripDirections) GetLocation() []*valhalla_odin.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TripDirections) GetSummary() *TripDirections_Summary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *TripDirections) GetManeuver() []*TripDirections_Maneuver {
	if m != nil {
		return m.Maneuver
	}
	return nil
}

func (m *TripDirections) GetShape() string {
	if m != nil && m.Shape != nil {
		return *m.Shape
	}
	return ""
}

type TripDirections_Summary struct {
	Length           *float32                   `protobuf:"fixed32,1,opt,name=length" json:"length,omitempty"`
	Time             *uint32                    `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Bbox             *valhalla_odin.BoundingBox `protobuf:"bytes,3,opt,name=bbox" json:"bbox,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *TripDirections_Summary) Reset()         { *m = TripDirections_Summary{} }
func (m *TripDirections_Summary) String() string { return proto.CompactTextString(m) }
func (*TripDirections_Summary) ProtoMessage()    {}
func (*TripDirections_Summary) Descriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 0}
}

func (m *TripDirections_Summary) GetLength() float32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *TripDirections_Summary) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *TripDirections_Summary) GetBbox() *valhalla_odin.BoundingBox {
	if m != nil {
		return m.Bbox
	}
	return nil
}

type TripDirections_TransitInfo struct {
	OnestopId         *string                              `protobuf:"bytes,1,opt,name=onestop_id,json=onestopId" json:"onestop_id,omitempty"`
	ShortName         *string                              `protobuf:"bytes,2,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
	LongName          *string                              `protobuf:"bytes,3,opt,name=long_name,json=longName" json:"long_name,omitempty"`
	Headsign          *string                              `protobuf:"bytes,4,opt,name=headsign" json:"headsign,omitempty"`
	Color             *uint32                              `protobuf:"varint,5,opt,name=color" json:"color,omitempty"`
	TextColor         *uint32                              `protobuf:"varint,6,opt,name=text_color,json=textColor" json:"text_color,omitempty"`
	Description       *string                              `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	OperatorOnestopId *string                              `protobuf:"bytes,8,opt,name=operator_onestop_id,json=operatorOnestopId" json:"operator_onestop_id,omitempty"`
	OperatorName      *string                              `protobuf:"bytes,9,opt,name=operator_name,json=operatorName" json:"operator_name,omitempty"`
	OperatorUrl       *string                              `protobuf:"bytes,10,opt,name=operator_url,json=operatorUrl" json:"operator_url,omitempty"`
	TransitStops      []*valhalla_odin.TransitPlatformInfo `protobuf:"bytes,11,rep,name=transit_stops,json=transitStops" json:"transit_stops,omitempty"`
	XXX_unrecognized  []byte                               `json:"-"`
}

func (m *TripDirections_TransitInfo) Reset()         { *m = TripDirections_TransitInfo{} }
func (m *TripDirections_TransitInfo) String() string { return proto.CompactTextString(m) }
func (*TripDirections_TransitInfo) ProtoMessage()    {}
func (*TripDirections_TransitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 1}
}

func (m *TripDirections_TransitInfo) GetOnestopId() string {
	if m != nil && m.OnestopId != nil {
		return *m.OnestopId
	}
	return ""
}

func (m *TripDirections_TransitInfo) GetShortName() string {
	if m != nil && m.ShortName != nil {
		return *m.ShortName
	}
	return ""
}

func (m *TripDirections_TransitInfo) GetLongName() string {
	if m != nil && m.LongName != nil {
		return *m.LongName
	}
	return ""
}

func (m *TripDirections_TransitInfo) GetHeadsign() string {
	if m != nil && m.Headsign != nil {
		return *m.Headsign
	}
	return ""
}

func (m *TripDirections_TransitInfo) GetColor() uint32 {
	if m != nil && m.Color != nil {
		return *m.Color
	}
	return 0
}

func (m *TripDirections_TransitInfo) GetTextColor() uint32 {
	if m != nil && m.TextColor != nil {
		return *m.TextColor
	}
	return 0
}

func (m *TripDirections_TransitInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *TripDirections_TransitInfo) GetOperatorOnestopId() string {
	if m != nil && m.OperatorOnestopId != nil {
		return *m.OperatorOnestopId
	}
	return ""
}

func (m *TripDirections_TransitInfo) GetOperatorName() string {
	if m != nil && m.OperatorName != nil {
		return *m.OperatorName
	}
	return ""
}

func (m *TripDirections_TransitInfo) GetOperatorUrl() string {
	if m != nil && m.OperatorUrl != nil {
		return *m.OperatorUrl
	}
	return ""
}

func (m *TripDirections_TransitInfo) GetTransitStops() []*valhalla_odin.TransitPlatformInfo {
	if m != nil {
		return m.TransitStops
	}
	return nil
}

type TripDirections_Maneuver struct {
	Type                             *TripDirections_Maneuver_Type              `protobuf:"varint,1,opt,name=type,enum=valhalla.odin.TripDirections_Maneuver_Type" json:"type,omitempty"`
	TextInstruction                  *string                                    `protobuf:"bytes,2,opt,name=text_instruction,json=textInstruction" json:"text_instruction,omitempty"`
	StreetName                       []string                                   `protobuf:"bytes,3,rep,name=street_name,json=streetName" json:"street_name,omitempty"`
	Length                           *float32                                   `protobuf:"fixed32,4,opt,name=length" json:"length,omitempty"`
	Time                             *uint32                                    `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	BeginCardinalDirection           *TripDirections_Maneuver_CardinalDirection `protobuf:"varint,6,opt,name=begin_cardinal_direction,json=beginCardinalDirection,enum=valhalla.odin.TripDirections_Maneuver_CardinalDirection" json:"begin_cardinal_direction,omitempty"`
	BeginHeading                     *uint32                                    `protobuf:"varint,7,opt,name=begin_heading,json=beginHeading" json:"begin_heading,omitempty"`
	BeginShapeIndex                  *uint32                                    `protobuf:"varint,8,opt,name=begin_shape_index,json=beginShapeIndex" json:"begin_shape_index,omitempty"`
	EndShapeIndex                    *uint32                                    `protobuf:"varint,9,opt,name=end_shape_index,json=endShapeIndex" json:"end_shape_index,omitempty"`
	PortionsToll                     *bool                                      `protobuf:"varint,10,opt,name=portions_toll,json=portionsToll" json:"portions_toll,omitempty"`
	PortionsUnpaved                  *bool                                      `protobuf:"varint,11,opt,name=portions_unpaved,json=portionsUnpaved" json:"portions_unpaved,omitempty"`
	VerbalTransitionAlertInstruction *string                                    `protobuf:"bytes,12,opt,name=verbal_transition_alert_instruction,json=verbalTransitionAlertInstruction" json:"verbal_transition_alert_instruction,omitempty"`
	VerbalPreTransitionInstruction   *string                                    `protobuf:"bytes,13,opt,name=verbal_pre_transition_instruction,json=verbalPreTransitionInstruction" json:"verbal_pre_transition_instruction,omitempty"`
	VerbalPostTransitionInstruction  *string                                    `protobuf:"bytes,14,opt,name=verbal_post_transition_instruction,json=verbalPostTransitionInstruction" json:"verbal_post_transition_instruction,omitempty"`
	BeginStreetName                  []string                                   `protobuf:"bytes,15,rep,name=begin_street_name,json=beginStreetName" json:"begin_street_name,omitempty"`
	Sign                             *TripDirections_Maneuver_Sign              `protobuf:"bytes,16,opt,name=sign" json:"sign,omitempty"`
	RoundaboutExitCount              *uint32                                    `protobuf:"varint,17,opt,name=roundabout_exit_count,json=roundaboutExitCount" json:"roundabout_exit_count,omitempty"`
	DepartInstruction                *string                                    `protobuf:"bytes,18,opt,name=depart_instruction,json=departInstruction" json:"depart_instruction,omitempty"`
	VerbalDepartInstruction          *string                                    `protobuf:"bytes,19,opt,name=verbal_depart_instruction,json=verbalDepartInstruction" json:"verbal_depart_instruction,omitempty"`
	ArriveInstruction                *string                                    `protobuf:"bytes,20,opt,name=arrive_instruction,json=arriveInstruction" json:"arrive_instruction,omitempty"`
	VerbalArriveInstruction          *string                                    `protobuf:"bytes,21,opt,name=verbal_arrive_instruction,json=verbalArriveInstruction" json:"verbal_arrive_instruction,omitempty"`
	TransitInfo                      *TripDirections_TransitInfo                `protobuf:"bytes,22,opt,name=transit_info,json=transitInfo" json:"transit_info,omitempty"`
	VerbalMultiCue                   *bool                                      `protobuf:"varint,23,opt,name=verbal_multi_cue,json=verbalMultiCue" json:"verbal_multi_cue,omitempty"`
	TravelMode                       *TripDirections_TravelMode                 `protobuf:"varint,24,opt,name=travel_mode,json=travelMode,enum=valhalla.odin.TripDirections_TravelMode" json:"travel_mode,omitempty"`
	VehicleType                      *TripDirections_VehicleType                `protobuf:"varint,25,opt,name=vehicle_type,json=vehicleType,enum=valhalla.odin.TripDirections_VehicleType" json:"vehicle_type,omitempty"`
	PedestrianType                   *TripDirections_PedestrianType             `protobuf:"varint,26,opt,name=pedestrian_type,json=pedestrianType,enum=valhalla.odin.TripDirections_PedestrianType" json:"pedestrian_type,omitempty"`
	BicycleType                      *TripDirections_BicycleType                `protobuf:"varint,27,opt,name=bicycle_type,json=bicycleType,enum=valhalla.odin.TripDirections_BicycleType" json:"bicycle_type,omitempty"`
	TransitType                      *TripDirections_TransitType                `protobuf:"varint,28,opt,name=transit_type,json=transitType,enum=valhalla.odin.TripDirections_TransitType" json:"transit_type,omitempty"`
	BeginPathIndex                   *uint32                                    `protobuf:"varint,29,opt,name=begin_path_index,json=beginPathIndex" json:"begin_path_index,omitempty"`
	EndPathIndex                     *uint32                                    `protobuf:"varint,30,opt,name=end_path_index,json=endPathIndex" json:"end_path_index,omitempty"`
	XXX_unrecognized                 []byte                                     `json:"-"`
}

func (m *TripDirections_Maneuver) Reset()         { *m = TripDirections_Maneuver{} }
func (m *TripDirections_Maneuver) String() string { return proto.CompactTextString(m) }
func (*TripDirections_Maneuver) ProtoMessage()    {}
func (*TripDirections_Maneuver) Descriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 2}
}

func (m *TripDirections_Maneuver) GetType() TripDirections_Maneuver_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return TripDirections_Maneuver_kNone
}

func (m *TripDirections_Maneuver) GetTextInstruction() string {
	if m != nil && m.TextInstruction != nil {
		return *m.TextInstruction
	}
	return ""
}

func (m *TripDirections_Maneuver) GetStreetName() []string {
	if m != nil {
		return m.StreetName
	}
	return nil
}

func (m *TripDirections_Maneuver) GetLength() float32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *TripDirections_Maneuver) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *TripDirections_Maneuver) GetBeginCardinalDirection() TripDirections_Maneuver_CardinalDirection {
	if m != nil && m.BeginCardinalDirection != nil {
		return *m.BeginCardinalDirection
	}
	return TripDirections_Maneuver_kNorth
}

func (m *TripDirections_Maneuver) GetBeginHeading() uint32 {
	if m != nil && m.BeginHeading != nil {
		return *m.BeginHeading
	}
	return 0
}

func (m *TripDirections_Maneuver) GetBeginShapeIndex() uint32 {
	if m != nil && m.BeginShapeIndex != nil {
		return *m.BeginShapeIndex
	}
	return 0
}

func (m *TripDirections_Maneuver) GetEndShapeIndex() uint32 {
	if m != nil && m.EndShapeIndex != nil {
		return *m.EndShapeIndex
	}
	return 0
}

func (m *TripDirections_Maneuver) GetPortionsToll() bool {
	if m != nil && m.PortionsToll != nil {
		return *m.PortionsToll
	}
	return false
}

func (m *TripDirections_Maneuver) GetPortionsUnpaved() bool {
	if m != nil && m.PortionsUnpaved != nil {
		return *m.PortionsUnpaved
	}
	return false
}

func (m *TripDirections_Maneuver) GetVerbalTransitionAlertInstruction() string {
	if m != nil && m.VerbalTransitionAlertInstruction != nil {
		return *m.VerbalTransitionAlertInstruction
	}
	return ""
}

func (m *TripDirections_Maneuver) GetVerbalPreTransitionInstruction() string {
	if m != nil && m.VerbalPreTransitionInstruction != nil {
		return *m.VerbalPreTransitionInstruction
	}
	return ""
}

func (m *TripDirections_Maneuver) GetVerbalPostTransitionInstruction() string {
	if m != nil && m.VerbalPostTransitionInstruction != nil {
		return *m.VerbalPostTransitionInstruction
	}
	return ""
}

func (m *TripDirections_Maneuver) GetBeginStreetName() []string {
	if m != nil {
		return m.BeginStreetName
	}
	return nil
}

func (m *TripDirections_Maneuver) GetSign() *TripDirections_Maneuver_Sign {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *TripDirections_Maneuver) GetRoundaboutExitCount() uint32 {
	if m != nil && m.RoundaboutExitCount != nil {
		return *m.RoundaboutExitCount
	}
	return 0
}

func (m *TripDirections_Maneuver) GetDepartInstruction() string {
	if m != nil && m.DepartInstruction != nil {
		return *m.DepartInstruction
	}
	return ""
}

func (m *TripDirections_Maneuver) GetVerbalDepartInstruction() string {
	if m != nil && m.VerbalDepartInstruction != nil {
		return *m.VerbalDepartInstruction
	}
	return ""
}

func (m *TripDirections_Maneuver) GetArriveInstruction() string {
	if m != nil && m.ArriveInstruction != nil {
		return *m.ArriveInstruction
	}
	return ""
}

func (m *TripDirections_Maneuver) GetVerbalArriveInstruction() string {
	if m != nil && m.VerbalArriveInstruction != nil {
		return *m.VerbalArriveInstruction
	}
	return ""
}

func (m *TripDirections_Maneuver) GetTransitInfo() *TripDirections_TransitInfo {
	if m != nil {
		return m.TransitInfo
	}
	return nil
}

func (m *TripDirections_Maneuver) GetVerbalMultiCue() bool {
	if m != nil && m.VerbalMultiCue != nil {
		return *m.VerbalMultiCue
	}
	return false
}

func (m *TripDirections_Maneuver) GetTravelMode() TripDirections_TravelMode {
	if m != nil && m.TravelMode != nil {
		return *m.TravelMode
	}
	return TripDirections_kDrive
}

func (m *TripDirections_Maneuver) GetVehicleType() TripDirections_VehicleType {
	if m != nil && m.VehicleType != nil {
		return *m.VehicleType
	}
	return TripDirections_kCar
}

func (m *TripDirections_Maneuver) GetPedestrianType() TripDirections_PedestrianType {
	if m != nil && m.PedestrianType != nil {
		return *m.PedestrianType
	}
	return TripDirections_kFoot
}

func (m *TripDirections_Maneuver) GetBicycleType() TripDirections_BicycleType {
	if m != nil && m.BicycleType != nil {
		return *m.BicycleType
	}
	return TripDirections_kRoad
}

func (m *TripDirections_Maneuver) GetTransitType() TripDirections_TransitType {
	if m != nil && m.TransitType != nil {
		return *m.TransitType
	}
	return TripDirections_kTram
}

func (m *TripDirections_Maneuver) GetBeginPathIndex() uint32 {
	if m != nil && m.BeginPathIndex != nil {
		return *m.BeginPathIndex
	}
	return 0
}

func (m *TripDirections_Maneuver) GetEndPathIndex() uint32 {
	if m != nil && m.EndPathIndex != nil {
		return *m.EndPathIndex
	}
	return 0
}

type TripDirections_Maneuver_Sign struct {
	ExitNumberElements []*TripDirections_Maneuver_Sign_Element `protobuf:"bytes,1,rep,name=exit_number_elements,json=exitNumberElements" json:"exit_number_elements,omitempty"`
	ExitBranchElements []*TripDirections_Maneuver_Sign_Element `protobuf:"bytes,2,rep,name=exit_branch_elements,json=exitBranchElements" json:"exit_branch_elements,omitempty"`
	ExitTowardElements []*TripDirections_Maneuver_Sign_Element `protobuf:"bytes,3,rep,name=exit_toward_elements,json=exitTowardElements" json:"exit_toward_elements,omitempty"`
	ExitNameElements   []*TripDirections_Maneuver_Sign_Element `protobuf:"bytes,4,rep,name=exit_name_elements,json=exitNameElements" json:"exit_name_elements,omitempty"`
	XXX_unrecognized   []byte                                  `json:"-"`
}

func (m *TripDirections_Maneuver_Sign) Reset()         { *m = TripDirections_Maneuver_Sign{} }
func (m *TripDirections_Maneuver_Sign) String() string { return proto.CompactTextString(m) }
func (*TripDirections_Maneuver_Sign) ProtoMessage()    {}
func (*TripDirections_Maneuver_Sign) Descriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 2, 0}
}

func (m *TripDirections_Maneuver_Sign) GetExitNumberElements() []*TripDirections_Maneuver_Sign_Element {
	if m != nil {
		return m.ExitNumberElements
	}
	return nil
}

func (m *TripDirections_Maneuver_Sign) GetExitBranchElements() []*TripDirections_Maneuver_Sign_Element {
	if m != nil {
		return m.ExitBranchElements
	}
	return nil
}

func (m *TripDirections_Maneuver_Sign) GetExitTowardElements() []*TripDirections_Maneuver_Sign_Element {
	if m != nil {
		return m.ExitTowardElements
	}
	return nil
}

func (m *TripDirections_Maneuver_Sign) GetExitNameElements() []*TripDirections_Maneuver_Sign_Element {
	if m != nil {
		return m.ExitNameElements
	}
	return nil
}

type TripDirections_Maneuver_Sign_Element struct {
	Text             *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	ConsecutiveCount *uint32 `protobuf:"varint,2,opt,name=consecutive_count,json=consecutiveCount" json:"consecutive_count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TripDirections_Maneuver_Sign_Element) Reset()         { *m = TripDirections_Maneuver_Sign_Element{} }
func (m *TripDirections_Maneuver_Sign_Element) String() string { return proto.CompactTextString(m) }
func (*TripDirections_Maneuver_Sign_Element) ProtoMessage()    {}
func (*TripDirections_Maneuver_Sign_Element) Descriptor() ([]byte, []int) {
	return fileDescriptorTripdirections, []int{0, 2, 0, 0}
}

func (m *TripDirections_Maneuver_Sign_Element) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *TripDirections_Maneuver_Sign_Element) GetConsecutiveCount() uint32 {
	if m != nil && m.ConsecutiveCount != nil {
		return *m.ConsecutiveCount
	}
	return 0
}

func init() {
	proto.RegisterType((*TripDirections)(nil), "valhalla.odin.TripDirections")
	proto.RegisterType((*TripDirections_Summary)(nil), "valhalla.odin.TripDirections.Summary")
	proto.RegisterType((*TripDirections_TransitInfo)(nil), "valhalla.odin.TripDirections.TransitInfo")
	proto.RegisterType((*TripDirections_Maneuver)(nil), "valhalla.odin.TripDirections.Maneuver")
	proto.RegisterType((*TripDirections_Maneuver_Sign)(nil), "valhalla.odin.TripDirections.Maneuver.Sign")
	proto.RegisterType((*TripDirections_Maneuver_Sign_Element)(nil), "valhalla.odin.TripDirections.Maneuver.Sign.Element")
	proto.RegisterEnum("valhalla.odin.TripDirections_TravelMode", TripDirections_TravelMode_name, TripDirections_TravelMode_value)
	proto.RegisterEnum("valhalla.odin.TripDirections_VehicleType", TripDirections_VehicleType_name, TripDirections_VehicleType_value)
	proto.RegisterEnum("valhalla.odin.TripDirections_PedestrianType", TripDirections_PedestrianType_name, TripDirections_PedestrianType_value)
	proto.RegisterEnum("valhalla.odin.TripDirections_BicycleType", TripDirections_BicycleType_name, TripDirections_BicycleType_value)
	proto.RegisterEnum("valhalla.odin.TripDirections_TransitType", TripDirections_TransitType_name, TripDirections_TransitType_value)
	proto.RegisterEnum("valhalla.odin.TripDirections_Maneuver_CardinalDirection", TripDirections_Maneuver_CardinalDirection_name, TripDirections_Maneuver_CardinalDirection_value)
	proto.RegisterEnum("valhalla.odin.TripDirections_Maneuver_Type", TripDirections_Maneuver_Type_name, TripDirections_Maneuver_Type_value)
}

func init() { proto.RegisterFile("tripdirections.proto", fileDescriptorTripdirections) }

var fileDescriptorTripdirections = []byte{
	// 1783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xef, 0x72, 0x1b, 0xb7,
	0x11, 0x37, 0xff, 0x89, 0xe4, 0x52, 0x24, 0x4f, 0x90, 0x64, 0xd1, 0x74, 0x6c, 0x4b, 0x74, 0x92,
	0x51, 0x9a, 0x9a, 0x9e, 0x51, 0x3a, 0x9d, 0xb6, 0x5f, 0x5c, 0x4b, 0xb6, 0x13, 0xb5, 0x96, 0xa3,
	0x39, 0x52, 0xcd, 0x4c, 0x3f, 0xf4, 0x06, 0xbc, 0x83, 0x48, 0x0c, 0xef, 0x80, 0x1b, 0x1c, 0x8e,
	0x11, 0x3f, 0xf6, 0x3d, 0xfa, 0xb9, 0x0f, 0xd0, 0xa7, 0xe9, 0x33, 0xf4, 0x29, 0x3a, 0x58, 0x1c,
	0x8f, 0x47, 0x4b, 0x75, 0xd4, 0xe4, 0x93, 0x81, 0xdf, 0xee, 0xef, 0xb7, 0xc0, 0xee, 0xde, 0x82,
	0x32, 0xec, 0x69, 0xc5, 0xe3, 0x80, 0x2b, 0xe6, 0x6b, 0x2e, 0x45, 0x32, 0x8c, 0x95, 0xd4, 0x92,
	0xb4, 0x17, 0x34, 0x9c, 0xd1, 0x30, 0xa4, 0x43, 0x19, 0x70, 0xd1, 0x77, 0x8c, 0x93, 0x2f, 0xa3,
	0x48, 0x0a, 0xeb, 0x30, 0xf8, 0xe7, 0x11, 0x74, 0xc6, 0x8a, 0xc7, 0x6f, 0x72, 0x26, 0x39, 0x80,
	0xba, 0x71, 0xf3, 0x78, 0xd0, 0x2b, 0x1d, 0x96, 0x8e, 0xab, 0xee, 0x96, 0xd9, 0x9e, 0x07, 0x64,
	0x1f, 0xb6, 0x42, 0x36, 0x35, 0x78, 0xf9, 0xb0, 0x74, 0xdc, 0x76, 0x6b, 0x21, 0x9b, 0x9e, 0x07,
	0xe4, 0x31, 0x34, 0x0d, 0xec, 0xcb, 0x54, 0xe8, 0x5e, 0x05, 0x2d, 0x8d, 0x90, 0x4d, 0xcf, 0xcc,
	0x9e, 0x7c, 0x03, 0x8d, 0x50, 0xfa, 0xd4, 0x28, 0xf7, 0xaa, 0x87, 0x95, 0xe3, 0xd6, 0xc9, 0xc1,
	0x70, 0xe3, 0x4c, 0xc3, 0xf7, 0x99, 0xd9, 0xcd, 0x1d, 0xc9, 0x2b, 0xa8, 0x27, 0x69, 0x14, 0x51,
	0xb5, 0xec, 0xd5, 0x0e, 0x4b, 0xc7, 0xad, 0x93, 0x2f, 0x3e, 0xe2, 0x6c, 0x9e, 0x78, 0x38, 0xb2,
	0xce, 0xee, 0x8a, 0x45, 0x4e, 0xa1, 0x11, 0x51, 0xc1, 0xd2, 0x05, 0x53, 0xbd, 0x2d, 0x8c, 0xfa,
	0xe5, 0xa7, 0x15, 0x2e, 0x32, 0x6f, 0x37, 0xe7, 0x91, 0x3d, 0xa8, 0x25, 0x33, 0x1a, 0xb3, 0x5e,
	0xfd, 0xb0, 0x74, 0xdc, 0x74, 0xed, 0xa6, 0xcf, 0xa0, 0x9e, 0x45, 0x23, 0x0f, 0x4d, 0x3a, 0xc4,
	0x54, 0xcf, 0x30, 0x4d, 0x65, 0x37, 0xdb, 0x11, 0x02, 0x55, 0xcd, 0x23, 0x96, 0x25, 0x09, 0xd7,
	0x64, 0x08, 0xd5, 0xc9, 0x44, 0xde, 0x60, 0x7a, 0x5a, 0x27, 0xfd, 0x8f, 0x0e, 0x73, 0x2a, 0x53,
	0x11, 0x70, 0x31, 0x3d, 0x95, 0x37, 0x2e, 0xfa, 0xf5, 0xff, 0x51, 0x81, 0xd6, 0x58, 0x51, 0x91,
	0x70, 0x7d, 0x2e, 0xae, 0x25, 0x79, 0x02, 0x20, 0x05, 0x4b, 0xb4, 0xcc, 0xcb, 0xd2, 0x74, 0x9b,
	0x19, 0x72, 0x1e, 0x18, 0x73, 0x32, 0x93, 0x4a, 0x7b, 0x82, 0x66, 0x81, 0x9b, 0x6e, 0x13, 0x91,
	0x0f, 0x34, 0x62, 0x58, 0x21, 0x29, 0xa6, 0xd6, 0x5a, 0x41, 0x6b, 0xc3, 0x00, 0x68, 0xec, 0x43,
	0x63, 0xc6, 0x68, 0x90, 0xf0, 0xa9, 0xa9, 0x10, 0xda, 0x56, 0x7b, 0x93, 0x03, 0x5f, 0x86, 0x52,
	0x61, 0x19, 0xda, 0xae, 0xdd, 0x98, 0x68, 0x9a, 0xdd, 0x68, 0xcf, 0x9a, 0xb6, 0xd0, 0xd4, 0x34,
	0xc8, 0x19, 0x9a, 0x0f, 0xa1, 0x15, 0xb0, 0xc4, 0x57, 0x3c, 0xc6, 0xaa, 0xdb, 0xf4, 0x15, 0x21,
	0x32, 0x84, 0x5d, 0x19, 0x33, 0x45, 0xb5, 0x54, 0x5e, 0xe1, 0x5a, 0x0d, 0xf4, 0xdc, 0x59, 0x99,
	0xbe, 0xcf, 0xaf, 0xf7, 0x1c, 0xda, 0xb9, 0x3f, 0xde, 0xa1, 0x89, 0x9e, 0xdb, 0x2b, 0x10, 0xef,
	0x71, 0x04, 0xf9, 0xde, 0x4b, 0x55, 0xd8, 0x03, 0x1b, 0x77, 0x85, 0x5d, 0xa9, 0x90, 0x7c, 0x0b,
	0x6d, 0x6d, 0x93, 0xea, 0x19, 0xe5, 0xa4, 0xd7, 0xc2, 0xde, 0x18, 0xdc, 0xea, 0x0d, 0xf4, 0xb9,
	0x0c, 0xa9, 0xbe, 0x96, 0x2a, 0x32, 0x05, 0x70, 0xb7, 0x33, 0xe2, 0xc8, 0xf0, 0xfa, 0xff, 0x3e,
	0x80, 0xc6, 0xaa, 0x65, 0xc8, 0x2b, 0xa8, 0xea, 0x65, 0xcc, 0xb0, 0x2a, 0x9d, 0x93, 0xaf, 0xef,
	0xd7, 0x68, 0xc3, 0xf1, 0x32, 0x66, 0x2e, 0x12, 0xc9, 0x57, 0xe0, 0x60, 0x3e, 0xb9, 0x48, 0xb4,
	0x4a, 0xd1, 0x31, 0xab, 0x61, 0xd7, 0xe0, 0xe7, 0x6b, 0x98, 0x3c, 0x83, 0x56, 0xa2, 0x15, 0x63,
	0x7a, 0x55, 0xcb, 0xca, 0x71, 0xd3, 0x05, 0x0b, 0x61, 0x16, 0xd6, 0x4d, 0x59, 0xbd, 0xb3, 0x29,
	0x6b, 0x85, 0xa6, 0x54, 0xd0, 0x9b, 0xb0, 0x29, 0x17, 0x9e, 0x4f, 0x55, 0xc0, 0x05, 0x0d, 0xbd,
	0x7c, 0x7e, 0x60, 0x55, 0x3b, 0x27, 0xbf, 0xbb, 0xe7, 0x65, 0xce, 0x32, 0x81, 0xdc, 0xe6, 0x3e,
	0x44, 0xe5, 0x5b, 0xb8, 0x29, 0xa5, 0x8d, 0x69, 0x7a, 0x8c, 0x8b, 0x29, 0xb6, 0x47, 0xdb, 0xdd,
	0x46, 0xf0, 0x3b, 0x8b, 0x91, 0x5f, 0xc1, 0x8e, 0x75, 0xc2, 0x6f, 0xce, 0xe3, 0x22, 0x60, 0x37,
	0xd8, 0x1d, 0x6d, 0xb7, 0x8b, 0x86, 0x91, 0xc1, 0xcf, 0x0d, 0x4c, 0xbe, 0x84, 0x2e, 0x13, 0xc1,
	0x86, 0x67, 0x13, 0x3d, 0xdb, 0x4c, 0x04, 0x05, 0xbf, 0xe7, 0xd0, 0x8e, 0xa5, 0xc2, 0x73, 0x7b,
	0x5a, 0x86, 0xb6, 0x3f, 0x1a, 0xee, 0xf6, 0x0a, 0x1c, 0xcb, 0x30, 0x34, 0x95, 0xc8, 0x9d, 0x52,
	0x11, 0xd3, 0x05, 0x0b, 0x7a, 0x2d, 0xf4, 0xeb, 0xae, 0xf0, 0x2b, 0x0b, 0x93, 0x0b, 0x78, 0xbe,
	0x60, 0x6a, 0x42, 0x43, 0x2f, 0xeb, 0x0c, 0x2e, 0x85, 0x47, 0x43, 0xa6, 0x36, 0xeb, 0xb8, 0x8d,
	0x75, 0x3c, 0xb4, 0xae, 0xe3, 0xdc, 0xf3, 0xb5, 0x71, 0x2c, 0x16, 0xf6, 0x1c, 0x8e, 0x32, 0xb9,
	0x58, 0xb1, 0xa2, 0x64, 0x51, 0xac, 0x8d, 0x62, 0x4f, 0xad, 0xe3, 0xa5, 0x62, 0x6b, 0xbd, 0xa2,
	0xd4, 0x9f, 0x61, 0xb0, 0x92, 0x92, 0x89, 0xfe, 0x5f, 0x5a, 0x1d, 0xd4, 0x7a, 0x96, 0x69, 0xc9,
	0x44, 0xdf, 0x2d, 0xb6, 0x2e, 0x45, 0xa1, 0xed, 0xba, 0xd8, 0x76, 0x59, 0x29, 0xd6, 0xbd, 0xf7,
	0x0a, 0xaa, 0x38, 0x45, 0x1c, 0x1c, 0x72, 0xf7, 0xfd, 0x10, 0x46, 0x7c, 0x2a, 0x5c, 0x24, 0x92,
	0x13, 0xd8, 0x57, 0x66, 0x14, 0xd2, 0x89, 0x4c, 0xb5, 0xc7, 0x6e, 0xb8, 0xce, 0x5e, 0x95, 0x1d,
	0xac, 0xe8, 0xee, 0xda, 0xf8, 0xf6, 0x86, 0x6b, 0xfb, 0xc0, 0xbc, 0x00, 0x12, 0xb0, 0x98, 0x7e,
	0x94, 0x76, 0x62, 0x47, 0x89, 0xb5, 0x14, 0xef, 0xf3, 0x07, 0x78, 0x94, 0x25, 0xe7, 0x0e, 0xd6,
	0x2e, 0xb2, 0x0e, 0xac, 0xc3, 0x9b, 0x5b, 0xdc, 0x17, 0x40, 0xa8, 0x52, 0x7c, 0xc1, 0x36, 0x48,
	0x7b, 0x36, 0x94, 0xb5, 0xdc, 0x1d, 0xea, 0x0e, 0xd6, 0x7e, 0x31, 0xd4, 0xeb, 0x5b, 0xdc, 0xf7,
	0xb0, 0x1a, 0x38, 0x1e, 0x17, 0xd7, 0xb2, 0xf7, 0x10, 0x53, 0xfa, 0xd5, 0xa7, 0x53, 0x5a, 0x78,
	0x30, 0xdc, 0x96, 0x2e, 0xbc, 0x1e, 0xc7, 0xe0, 0x64, 0x27, 0x89, 0xd2, 0x50, 0x73, 0xcf, 0x4f,
	0x59, 0xef, 0x00, 0xdb, 0xba, 0x63, 0xf1, 0x0b, 0x03, 0x9f, 0xa5, 0x8c, 0x9c, 0x83, 0x21, 0x2e,
	0x58, 0xe8, 0x45, 0x32, 0x60, 0xbd, 0x1e, 0x4e, 0x81, 0xe3, 0x9f, 0x0c, 0xbb, 0x60, 0xe1, 0x85,
	0x0c, 0x98, 0x0b, 0x3a, 0x5f, 0x9b, 0x2b, 0x2c, 0xd8, 0x8c, 0xfb, 0x21, 0xf3, 0x70, 0x3c, 0x3e,
	0x42, 0xad, 0x9f, 0xb8, 0xc2, 0x5f, 0x2c, 0x03, 0x87, 0x63, 0x6b, 0xb1, 0xde, 0x90, 0x2b, 0xe8,
	0xc6, 0x2c, 0x60, 0x89, 0x56, 0x9c, 0x0a, 0x2b, 0xd8, 0x47, 0xc1, 0x5f, 0x7f, 0x5a, 0xf0, 0x32,
	0x27, 0xa1, 0x66, 0x27, 0xde, 0xd8, 0x9b, 0x43, 0x4e, 0xb8, 0xbf, 0xcc, 0x0f, 0xf9, 0xf8, 0x3e,
	0x87, 0x3c, 0xb5, 0x0c, 0x7b, 0xc8, 0xc9, 0x7a, 0x53, 0xac, 0x1a, 0xaa, 0x7d, 0x76, 0x1f, 0xb5,
	0xac, 0x6a, 0x56, 0x4d, 0xaf, 0x37, 0xa6, 0x6a, 0xf6, 0xd3, 0x8b, 0xa9, 0x9e, 0x65, 0xa3, 0xed,
	0x09, 0x7e, 0x08, 0x1d, 0xc4, 0x2f, 0xa9, 0x9e, 0xd9, 0xd9, 0xf6, 0x39, 0x74, 0xcc, 0x0c, 0x2c,
	0xf8, 0x3d, 0xb5, 0x53, 0x95, 0x89, 0x20, 0xf7, 0xea, 0xff, 0xa7, 0x02, 0x55, 0xf3, 0xb1, 0x11,
	0x06, 0x7b, 0xf8, 0x6d, 0x89, 0x34, 0x9a, 0x30, 0xe5, 0xb1, 0x90, 0x45, 0x4c, 0xe8, 0xa4, 0x57,
	0xc2, 0xd7, 0xf0, 0x9b, 0xff, 0xe3, 0xbb, 0x1d, 0xbe, 0xb5, 0x5c, 0x97, 0x18, 0xc1, 0x0f, 0xa8,
	0x97, 0x41, 0x49, 0x1e, 0x66, 0xa2, 0xa8, 0xf0, 0x67, 0xeb, 0x30, 0xe5, 0x5f, 0x18, 0xe6, 0x14,
	0xf5, 0x6e, 0x85, 0xd1, 0xf2, 0x47, 0xaa, 0x82, 0x75, 0x98, 0xca, 0x2f, 0x0c, 0x33, 0x46, 0xbd,
	0x3c, 0x0c, 0x05, 0x62, 0x93, 0x46, 0x23, 0xb6, 0x0e, 0x52, 0xfd, 0xf9, 0x41, 0x1c, 0x4c, 0x19,
	0x8d, 0xd8, 0x2a, 0x44, 0xff, 0x4f, 0x50, 0xcf, 0xd6, 0xf8, 0x5c, 0xb3, 0x1b, 0x9d, 0xfd, 0xd2,
	0xc3, 0x35, 0xf9, 0x1a, 0x76, 0x7c, 0x29, 0x12, 0xe6, 0xa7, 0xda, 0x4c, 0x13, 0x3b, 0x19, 0xed,
	0x8f, 0x4c, 0xa7, 0x60, 0xc0, 0xb1, 0x38, 0xf8, 0x7b, 0x09, 0x76, 0x6e, 0xbf, 0xbe, 0x00, 0x5b,
	0xf3, 0x0f, 0x52, 0xe9, 0x99, 0xf3, 0x80, 0x74, 0x00, 0xec, 0xfa, 0x2d, 0x4d, 0xb4, 0x53, 0x22,
	0x4d, 0xa8, 0xcd, 0x71, 0x59, 0x46, 0xd3, 0x48, 0xa6, 0x99, 0xa9, 0x82, 0x34, 0xdc, 0x3b, 0xd5,
	0xb5, 0xed, 0x07, 0x96, 0x68, 0xa7, 0x86, 0x34, 0x5c, 0x6e, 0xad, 0x15, 0x71, 0x5f, 0x1f, 0xfc,
	0xab, 0x06, 0x55, 0xec, 0x64, 0xe3, 0xf3, 0x41, 0x0a, 0xe6, 0x3c, 0xb0, 0x52, 0x9a, 0x2a, 0x13,
	0xb1, 0x0b, 0x2d, 0xbb, 0x76, 0xf9, 0x74, 0x96, 0xc7, 0x35, 0xc0, 0x7b, 0x76, 0x6d, 0xe2, 0x3a,
	0xb0, 0x3d, 0x7f, 0xc3, 0x12, 0xcd, 0x05, 0xfe, 0x5d, 0xe0, 0x54, 0xc9, 0x3e, 0xec, 0x14, 0x11,
	0x4b, 0xac, 0x91, 0x3d, 0x70, 0x8a, 0x30, 0xd2, 0xb7, 0xc8, 0x36, 0x34, 0xe6, 0xa7, 0xcc, 0x97,
	0x11, 0x4b, 0x9c, 0x3a, 0x69, 0x43, 0x73, 0x7e, 0x26, 0x85, 0xe6, 0x22, 0x65, 0x4e, 0x03, 0xb5,
	0x47, 0xa1, 0xe1, 0x5b, 0x91, 0x26, 0x1e, 0xcd, 0xae, 0xc1, 0x1e, 0x6d, 0x46, 0x55, 0x6c, 0x81,
	0x16, 0x02, 0x57, 0x3a, 0x55, 0x59, 0xc8, 0x6d, 0x3c, 0x2b, 0x02, 0x18, 0xac, 0x6d, 0xcf, 0x6e,
	0x18, 0xb8, 0xef, 0xe0, 0x9d, 0x71, 0xd9, 0xb5, 0x62, 0x18, 0x0a, 0x01, 0x87, 0xec, 0x40, 0x7b,
	0xee, 0xd2, 0x28, 0x1e, 0x69, 0x45, 0x51, 0x6e, 0x07, 0xe9, 0x06, 0xb2, 0xf2, 0x04, 0x4f, 0x6b,
	0xf6, 0xc8, 0xd8, 0x45, 0xb3, 0x79, 0xf3, 0xac, 0x79, 0x0f, 0xcd, 0x66, 0x8f, 0xe6, 0x7d, 0x14,
	0x1c, 0x69, 0xba, 0xcc, 0x05, 0x1f, 0xae, 0x72, 0xb9, 0xb4, 0x8c, 0x03, 0x64, 0x98, 0x3d, 0x32,
	0x7a, 0x78, 0xd9, 0x0b, 0xa6, 0xa6, 0xcc, 0x79, 0x84, 0xd9, 0x73, 0xd7, 0x4f, 0xab, 0xd0, 0x4c,
	0x39, 0x7d, 0xb2, 0x0b, 0xdd, 0x22, 0x7a, 0xc3, 0xb5, 0xf3, 0x18, 0xaf, 0xf2, 0x8e, 0x29, 0xb5,
	0xb4, 0x5e, 0x9f, 0x61, 0x18, 0x0b, 0x18, 0x87, 0x27, 0x98, 0xf3, 0x6c, 0xa2, 0x39, 0x4f, 0x51,
	0x79, 0x35, 0xdf, 0xcc, 0x3f, 0xd7, 0x4c, 0x39, 0xcf, 0x8a, 0xa8, 0xcb, 0x22, 0xca, 0xc5, 0xf7,
	0xc2, 0x39, 0x24, 0x8f, 0xe1, 0x60, 0x85, 0x9e, 0x49, 0x21, 0x6c, 0xc7, 0xda, 0x56, 0x39, 0x22,
	0x4f, 0xa1, 0x7f, 0xdb, 0x98, 0x4b, 0x0e, 0xc8, 0x11, 0x3c, 0xb9, 0x6d, 0x2f, 0xb6, 0xce, 0x73,
	0xf2, 0x05, 0x1c, 0xcd, 0x0b, 0xbf, 0x73, 0xee, 0x76, 0xfb, 0x7c, 0xf0, 0x16, 0x60, 0xfd, 0xa0,
	0x61, 0x9a, 0xde, 0x98, 0xc7, 0xd9, 0x79, 0x80, 0x77, 0x5f, 0x3f, 0x27, 0x4e, 0xc9, 0xf6, 0x97,
	0x1d, 0xff, 0x4e, 0x79, 0xe3, 0xe6, 0x95, 0xc1, 0xdf, 0xa0, 0x55, 0x78, 0xcb, 0x48, 0x03, 0xaa,
	0xf3, 0x33, 0xaa, 0x32, 0x95, 0x0b, 0xa9, 0xa5, 0xb2, 0x3c, 0xab, 0xf2, 0x3a, 0xd5, 0xf2, 0x34,
	0x4d, 0x9c, 0x32, 0x66, 0x7d, 0xac, 0xa8, 0xaf, 0xa5, 0x1a, 0x2b, 0xca, 0x43, 0xa6, 0x9c, 0x0a,
	0x96, 0x17, 0x39, 0x23, 0x5f, 0x4a, 0x93, 0xf7, 0xea, 0xe0, 0xf7, 0xd0, 0xd9, 0x7c, 0xda, 0xb0,
	0xe1, 0xde, 0x49, 0xa9, 0xb3, 0x18, 0x3f, 0xcc, 0x18, 0x0b, 0xfd, 0x19, 0xe5, 0xca, 0x29, 0x91,
	0x16, 0xd4, 0xe7, 0x23, 0x36, 0xfd, 0x91, 0x2e, 0x9d, 0xf2, 0xe0, 0x8f, 0xd0, 0x2a, 0xbc, 0x60,
	0xc8, 0x73, 0x25, 0x0d, 0xb2, 0x8f, 0xf3, 0x4c, 0xc9, 0x24, 0xc9, 0x28, 0xdf, 0x2d, 0x27, 0x8a,
	0x07, 0x4e, 0x19, 0x9b, 0xe7, 0xc2, 0xcc, 0x15, 0xca, 0x85, 0x53, 0x19, 0xa8, 0xfc, 0x8f, 0xd3,
	0x5c, 0x61, 0xac, 0x68, 0x94, 0x29, 0x5c, 0x30, 0xad, 0x64, 0x36, 0x50, 0x5c, 0xca, 0x43, 0xa7,
	0x8c, 0xd7, 0x37, 0xf7, 0xb3, 0xa3, 0x04, 0xfb, 0xc5, 0xa9, 0xda, 0x2f, 0x92, 0x4e, 0x42, 0x66,
	0x32, 0x53, 0xc3, 0x44, 0x7c, 0x2b, 0x45, 0x20, 0x43, 0x9a, 0x0d, 0x93, 0x77, 0xa9, 0xe0, 0x7e,
	0x1a, 0x52, 0xe5, 0xd4, 0x4f, 0x7f, 0xfb, 0xd7, 0xdf, 0x4c, 0xb9, 0x9e, 0xa5, 0x93, 0xa1, 0x2f,
	0xa3, 0x97, 0xa9, 0xe0, 0x9a, 0x05, 0x2f, 0x02, 0x53, 0x1a, 0x95, 0xbc, 0x5c, 0x8d, 0xdf, 0x97,
	0xf1, 0xe4, 0xe5, 0xe6, 0xff, 0x83, 0x5c, 0x3e, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18,
	0x85, 0x28, 0x72, 0x1a, 0x11, 0x00, 0x00,
}
