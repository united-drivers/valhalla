// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transit.proto

/*
Package transit is a generated protocol buffer package.

It is generated from these files:
	transit.proto

It has these top-level messages:
	Transit
*/
package transit

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Transit_VehicleType int32

const (
	Transit_kTram      Transit_VehicleType = 0
	Transit_kMetro     Transit_VehicleType = 1
	Transit_kRail      Transit_VehicleType = 2
	Transit_kBus       Transit_VehicleType = 3
	Transit_kFerry     Transit_VehicleType = 4
	Transit_kCableCar  Transit_VehicleType = 5
	Transit_kGondola   Transit_VehicleType = 6
	Transit_kFunicular Transit_VehicleType = 7
)

var Transit_VehicleType_name = map[int32]string{
	0: "kTram",
	1: "kMetro",
	2: "kRail",
	3: "kBus",
	4: "kFerry",
	5: "kCableCar",
	6: "kGondola",
	7: "kFunicular",
}
var Transit_VehicleType_value = map[string]int32{
	"kTram":      0,
	"kMetro":     1,
	"kRail":      2,
	"kBus":       3,
	"kFerry":     4,
	"kCableCar":  5,
	"kGondola":   6,
	"kFunicular": 7,
}

func (x Transit_VehicleType) Enum() *Transit_VehicleType {
	p := new(Transit_VehicleType)
	*p = x
	return p
}
func (x Transit_VehicleType) String() string {
	return proto.EnumName(Transit_VehicleType_name, int32(x))
}
func (x *Transit_VehicleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Transit_VehicleType_value, data, "Transit_VehicleType")
	if err != nil {
		return err
	}
	*x = Transit_VehicleType(value)
	return nil
}
func (Transit_VehicleType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTransit, []int{0, 0} }

type Transit struct {
	Nodes            []*Transit_Node     `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	StopPairs        []*Transit_StopPair `protobuf:"bytes,2,rep,name=stop_pairs,json=stopPairs" json:"stop_pairs,omitempty"`
	Routes           []*Transit_Route    `protobuf:"bytes,3,rep,name=routes" json:"routes,omitempty"`
	Shapes           []*Transit_Shape    `protobuf:"bytes,4,rep,name=shapes" json:"shapes,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Transit) Reset()                    { *m = Transit{} }
func (m *Transit) String() string            { return proto.CompactTextString(m) }
func (*Transit) ProtoMessage()               {}
func (*Transit) Descriptor() ([]byte, []int) { return fileDescriptorTransit, []int{0} }

func (m *Transit) GetNodes() []*Transit_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Transit) GetStopPairs() []*Transit_StopPair {
	if m != nil {
		return m.StopPairs
	}
	return nil
}

func (m *Transit) GetRoutes() []*Transit_Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *Transit) GetShapes() []*Transit_Shape {
	if m != nil {
		return m.Shapes
	}
	return nil
}

type Transit_Node struct {
	Lon                *float32 `protobuf:"fixed32,1,opt,name=lon" json:"lon,omitempty"`
	Lat                *float32 `protobuf:"fixed32,2,opt,name=lat" json:"lat,omitempty"`
	Type               *uint32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Graphid            *uint64  `protobuf:"varint,4,opt,name=graphid" json:"graphid,omitempty"`
	PrevTypeGraphid    *uint64  `protobuf:"varint,5,opt,name=prev_type_graphid,json=prevTypeGraphid" json:"prev_type_graphid,omitempty"`
	Name               *string  `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	OnestopId          *string  `protobuf:"bytes,7,opt,name=onestop_id,json=onestopId" json:"onestop_id,omitempty"`
	OsmWayId           *uint64  `protobuf:"varint,8,opt,name=osm_way_id,json=osmWayId" json:"osm_way_id,omitempty"`
	Timezone           *string  `protobuf:"bytes,9,opt,name=timezone" json:"timezone,omitempty"`
	WheelchairBoarding *bool    `protobuf:"varint,10,opt,name=wheelchair_boarding,json=wheelchairBoarding" json:"wheelchair_boarding,omitempty"`
	Generated          *bool    `protobuf:"varint,11,opt,name=generated" json:"generated,omitempty"`
	Traversability     *uint32  `protobuf:"varint,12,opt,name=traversability" json:"traversability,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *Transit_Node) Reset()                    { *m = Transit_Node{} }
func (m *Transit_Node) String() string            { return proto.CompactTextString(m) }
func (*Transit_Node) ProtoMessage()               {}
func (*Transit_Node) Descriptor() ([]byte, []int) { return fileDescriptorTransit, []int{0, 0} }

func (m *Transit_Node) GetLon() float32 {
	if m != nil && m.Lon != nil {
		return *m.Lon
	}
	return 0
}

func (m *Transit_Node) GetLat() float32 {
	if m != nil && m.Lat != nil {
		return *m.Lat
	}
	return 0
}

func (m *Transit_Node) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Transit_Node) GetGraphid() uint64 {
	if m != nil && m.Graphid != nil {
		return *m.Graphid
	}
	return 0
}

func (m *Transit_Node) GetPrevTypeGraphid() uint64 {
	if m != nil && m.PrevTypeGraphid != nil {
		return *m.PrevTypeGraphid
	}
	return 0
}

func (m *Transit_Node) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Transit_Node) GetOnestopId() string {
	if m != nil && m.OnestopId != nil {
		return *m.OnestopId
	}
	return ""
}

func (m *Transit_Node) GetOsmWayId() uint64 {
	if m != nil && m.OsmWayId != nil {
		return *m.OsmWayId
	}
	return 0
}

func (m *Transit_Node) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

func (m *Transit_Node) GetWheelchairBoarding() bool {
	if m != nil && m.WheelchairBoarding != nil {
		return *m.WheelchairBoarding
	}
	return false
}

func (m *Transit_Node) GetGenerated() bool {
	if m != nil && m.Generated != nil {
		return *m.Generated
	}
	return false
}

func (m *Transit_Node) GetTraversability() uint32 {
	if m != nil && m.Traversability != nil {
		return *m.Traversability
	}
	return 0
}

type Transit_StopPair struct {
	BikesAllowed            *bool    `protobuf:"varint,1,opt,name=bikes_allowed,json=bikesAllowed" json:"bikes_allowed,omitempty"`
	BlockId                 *uint32  `protobuf:"varint,2,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
	DestinationArrivalTime  *uint32  `protobuf:"varint,3,opt,name=destination_arrival_time,json=destinationArrivalTime" json:"destination_arrival_time,omitempty"`
	DestinationGraphid      *uint64  `protobuf:"varint,4,opt,name=destination_graphid,json=destinationGraphid" json:"destination_graphid,omitempty"`
	DestinationOnestopId    *string  `protobuf:"bytes,5,opt,name=destination_onestop_id,json=destinationOnestopId" json:"destination_onestop_id,omitempty"`
	OperatedByOnestopId     *string  `protobuf:"bytes,6,opt,name=operated_by_onestop_id,json=operatedByOnestopId" json:"operated_by_onestop_id,omitempty"`
	OriginDepartureTime     *uint32  `protobuf:"varint,7,opt,name=origin_departure_time,json=originDepartureTime" json:"origin_departure_time,omitempty"`
	OriginGraphid           *uint64  `protobuf:"varint,8,opt,name=origin_graphid,json=originGraphid" json:"origin_graphid,omitempty"`
	OriginOnestopId         *string  `protobuf:"bytes,9,opt,name=origin_onestop_id,json=originOnestopId" json:"origin_onestop_id,omitempty"`
	RouteIndex              *uint32  `protobuf:"varint,10,opt,name=route_index,json=routeIndex" json:"route_index,omitempty"`
	ServiceAddedDates       []uint32 `protobuf:"varint,11,rep,name=service_added_dates,json=serviceAddedDates" json:"service_added_dates,omitempty"`
	ServiceDaysOfWeek       []bool   `protobuf:"varint,12,rep,name=service_days_of_week,json=serviceDaysOfWeek" json:"service_days_of_week,omitempty"`
	ServiceEndDate          *uint32  `protobuf:"varint,13,opt,name=service_end_date,json=serviceEndDate" json:"service_end_date,omitempty"`
	ServiceExceptDates      []uint32 `protobuf:"varint,14,rep,name=service_except_dates,json=serviceExceptDates" json:"service_except_dates,omitempty"`
	ServiceStartDate        *uint32  `protobuf:"varint,15,opt,name=service_start_date,json=serviceStartDate" json:"service_start_date,omitempty"`
	TripHeadsign            *string  `protobuf:"bytes,16,opt,name=trip_headsign,json=tripHeadsign" json:"trip_headsign,omitempty"`
	TripId                  *uint32  `protobuf:"varint,17,opt,name=trip_id,json=tripId" json:"trip_id,omitempty"`
	WheelchairAccessible    *bool    `protobuf:"varint,18,opt,name=wheelchair_accessible,json=wheelchairAccessible" json:"wheelchair_accessible,omitempty"`
	ShapeId                 *uint32  `protobuf:"varint,20,opt,name=shape_id,json=shapeId" json:"shape_id,omitempty"`
	OriginDistTraveled      *float32 `protobuf:"fixed32,21,opt,name=origin_dist_traveled,json=originDistTraveled" json:"origin_dist_traveled,omitempty"`
	DestinationDistTraveled *float32 `protobuf:"fixed32,22,opt,name=destination_dist_traveled,json=destinationDistTraveled" json:"destination_dist_traveled,omitempty"`
	FrequencyEndTime        *uint32  `protobuf:"varint,23,opt,name=frequency_end_time,json=frequencyEndTime" json:"frequency_end_time,omitempty"`
	FrequencyHeadwaySeconds *uint32  `protobuf:"varint,24,opt,name=frequency_headway_seconds,json=frequencyHeadwaySeconds" json:"frequency_headway_seconds,omitempty"`
	XXX_unrecognized        []byte   `json:"-"`
}

func (m *Transit_StopPair) Reset()                    { *m = Transit_StopPair{} }
func (m *Transit_StopPair) String() string            { return proto.CompactTextString(m) }
func (*Transit_StopPair) ProtoMessage()               {}
func (*Transit_StopPair) Descriptor() ([]byte, []int) { return fileDescriptorTransit, []int{0, 1} }

func (m *Transit_StopPair) GetBikesAllowed() bool {
	if m != nil && m.BikesAllowed != nil {
		return *m.BikesAllowed
	}
	return false
}

func (m *Transit_StopPair) GetBlockId() uint32 {
	if m != nil && m.BlockId != nil {
		return *m.BlockId
	}
	return 0
}

func (m *Transit_StopPair) GetDestinationArrivalTime() uint32 {
	if m != nil && m.DestinationArrivalTime != nil {
		return *m.DestinationArrivalTime
	}
	return 0
}

func (m *Transit_StopPair) GetDestinationGraphid() uint64 {
	if m != nil && m.DestinationGraphid != nil {
		return *m.DestinationGraphid
	}
	return 0
}

func (m *Transit_StopPair) GetDestinationOnestopId() string {
	if m != nil && m.DestinationOnestopId != nil {
		return *m.DestinationOnestopId
	}
	return ""
}

func (m *Transit_StopPair) GetOperatedByOnestopId() string {
	if m != nil && m.OperatedByOnestopId != nil {
		return *m.OperatedByOnestopId
	}
	return ""
}

func (m *Transit_StopPair) GetOriginDepartureTime() uint32 {
	if m != nil && m.OriginDepartureTime != nil {
		return *m.OriginDepartureTime
	}
	return 0
}

func (m *Transit_StopPair) GetOriginGraphid() uint64 {
	if m != nil && m.OriginGraphid != nil {
		return *m.OriginGraphid
	}
	return 0
}

func (m *Transit_StopPair) GetOriginOnestopId() string {
	if m != nil && m.OriginOnestopId != nil {
		return *m.OriginOnestopId
	}
	return ""
}

func (m *Transit_StopPair) GetRouteIndex() uint32 {
	if m != nil && m.RouteIndex != nil {
		return *m.RouteIndex
	}
	return 0
}

func (m *Transit_StopPair) GetServiceAddedDates() []uint32 {
	if m != nil {
		return m.ServiceAddedDates
	}
	return nil
}

func (m *Transit_StopPair) GetServiceDaysOfWeek() []bool {
	if m != nil {
		return m.ServiceDaysOfWeek
	}
	return nil
}

func (m *Transit_StopPair) GetServiceEndDate() uint32 {
	if m != nil && m.ServiceEndDate != nil {
		return *m.ServiceEndDate
	}
	return 0
}

func (m *Transit_StopPair) GetServiceExceptDates() []uint32 {
	if m != nil {
		return m.ServiceExceptDates
	}
	return nil
}

func (m *Transit_StopPair) GetServiceStartDate() uint32 {
	if m != nil && m.ServiceStartDate != nil {
		return *m.ServiceStartDate
	}
	return 0
}

func (m *Transit_StopPair) GetTripHeadsign() string {
	if m != nil && m.TripHeadsign != nil {
		return *m.TripHeadsign
	}
	return ""
}

func (m *Transit_StopPair) GetTripId() uint32 {
	if m != nil && m.TripId != nil {
		return *m.TripId
	}
	return 0
}

func (m *Transit_StopPair) GetWheelchairAccessible() bool {
	if m != nil && m.WheelchairAccessible != nil {
		return *m.WheelchairAccessible
	}
	return false
}

func (m *Transit_StopPair) GetShapeId() uint32 {
	if m != nil && m.ShapeId != nil {
		return *m.ShapeId
	}
	return 0
}

func (m *Transit_StopPair) GetOriginDistTraveled() float32 {
	if m != nil && m.OriginDistTraveled != nil {
		return *m.OriginDistTraveled
	}
	return 0
}

func (m *Transit_StopPair) GetDestinationDistTraveled() float32 {
	if m != nil && m.DestinationDistTraveled != nil {
		return *m.DestinationDistTraveled
	}
	return 0
}

func (m *Transit_StopPair) GetFrequencyEndTime() uint32 {
	if m != nil && m.FrequencyEndTime != nil {
		return *m.FrequencyEndTime
	}
	return 0
}

func (m *Transit_StopPair) GetFrequencyHeadwaySeconds() uint32 {
	if m != nil && m.FrequencyHeadwaySeconds != nil {
		return *m.FrequencyHeadwaySeconds
	}
	return 0
}

type Transit_Route struct {
	Name                *string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OnestopId           *string              `protobuf:"bytes,2,opt,name=onestop_id,json=onestopId" json:"onestop_id,omitempty"`
	OperatedByName      *string              `protobuf:"bytes,3,opt,name=operated_by_name,json=operatedByName" json:"operated_by_name,omitempty"`
	OperatedByOnestopId *string              `protobuf:"bytes,4,opt,name=operated_by_onestop_id,json=operatedByOnestopId" json:"operated_by_onestop_id,omitempty"`
	OperatedByWebsite   *string              `protobuf:"bytes,5,opt,name=operated_by_website,json=operatedByWebsite" json:"operated_by_website,omitempty"`
	RouteColor          *uint32              `protobuf:"varint,6,opt,name=route_color,json=routeColor" json:"route_color,omitempty"`
	RouteDesc           *string              `protobuf:"bytes,7,opt,name=route_desc,json=routeDesc" json:"route_desc,omitempty"`
	RouteLongName       *string              `protobuf:"bytes,8,opt,name=route_long_name,json=routeLongName" json:"route_long_name,omitempty"`
	RouteTextColor      *uint32              `protobuf:"varint,9,opt,name=route_text_color,json=routeTextColor" json:"route_text_color,omitempty"`
	VehicleType         *Transit_VehicleType `protobuf:"varint,10,opt,name=vehicle_type,json=vehicleType,enum=valhalla.mjolnir.Transit_VehicleType" json:"vehicle_type,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *Transit_Route) Reset()                    { *m = Transit_Route{} }
func (m *Transit_Route) String() string            { return proto.CompactTextString(m) }
func (*Transit_Route) ProtoMessage()               {}
func (*Transit_Route) Descriptor() ([]byte, []int) { return fileDescriptorTransit, []int{0, 2} }

func (m *Transit_Route) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Transit_Route) GetOnestopId() string {
	if m != nil && m.OnestopId != nil {
		return *m.OnestopId
	}
	return ""
}

func (m *Transit_Route) GetOperatedByName() string {
	if m != nil && m.OperatedByName != nil {
		return *m.OperatedByName
	}
	return ""
}

func (m *Transit_Route) GetOperatedByOnestopId() string {
	if m != nil && m.OperatedByOnestopId != nil {
		return *m.OperatedByOnestopId
	}
	return ""
}

func (m *Transit_Route) GetOperatedByWebsite() string {
	if m != nil && m.OperatedByWebsite != nil {
		return *m.OperatedByWebsite
	}
	return ""
}

func (m *Transit_Route) GetRouteColor() uint32 {
	if m != nil && m.RouteColor != nil {
		return *m.RouteColor
	}
	return 0
}

func (m *Transit_Route) GetRouteDesc() string {
	if m != nil && m.RouteDesc != nil {
		return *m.RouteDesc
	}
	return ""
}

func (m *Transit_Route) GetRouteLongName() string {
	if m != nil && m.RouteLongName != nil {
		return *m.RouteLongName
	}
	return ""
}

func (m *Transit_Route) GetRouteTextColor() uint32 {
	if m != nil && m.RouteTextColor != nil {
		return *m.RouteTextColor
	}
	return 0
}

func (m *Transit_Route) GetVehicleType() Transit_VehicleType {
	if m != nil && m.VehicleType != nil {
		return *m.VehicleType
	}
	return Transit_kTram
}

type Transit_Shape struct {
	ShapeId          *uint32 `protobuf:"varint,1,opt,name=shape_id,json=shapeId" json:"shape_id,omitempty"`
	EncodedShape     []byte  `protobuf:"bytes,2,opt,name=encoded_shape,json=encodedShape" json:"encoded_shape,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Transit_Shape) Reset()                    { *m = Transit_Shape{} }
func (m *Transit_Shape) String() string            { return proto.CompactTextString(m) }
func (*Transit_Shape) ProtoMessage()               {}
func (*Transit_Shape) Descriptor() ([]byte, []int) { return fileDescriptorTransit, []int{0, 3} }

func (m *Transit_Shape) GetShapeId() uint32 {
	if m != nil && m.ShapeId != nil {
		return *m.ShapeId
	}
	return 0
}

func (m *Transit_Shape) GetEncodedShape() []byte {
	if m != nil {
		return m.EncodedShape
	}
	return nil
}

func init() {
	proto.RegisterType((*Transit)(nil), "valhalla.mjolnir.Transit")
	proto.RegisterType((*Transit_Node)(nil), "valhalla.mjolnir.Transit.Node")
	proto.RegisterType((*Transit_StopPair)(nil), "valhalla.mjolnir.Transit.StopPair")
	proto.RegisterType((*Transit_Route)(nil), "valhalla.mjolnir.Transit.Route")
	proto.RegisterType((*Transit_Shape)(nil), "valhalla.mjolnir.Transit.Shape")
	proto.RegisterEnum("valhalla.mjolnir.Transit_VehicleType", Transit_VehicleType_name, Transit_VehicleType_value)
}

func init() { proto.RegisterFile("transit.proto", fileDescriptorTransit) }

var fileDescriptorTransit = []byte{
	// 1127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xef, 0x6e, 0xdb, 0x36,
	0x10, 0x9f, 0x63, 0x3b, 0xb6, 0x2f, 0x76, 0xa2, 0x30, 0x69, 0xa3, 0x06, 0xdd, 0x6a, 0xb4, 0x68,
	0x61, 0x0c, 0xad, 0x3d, 0x74, 0x05, 0x36, 0xf4, 0x5b, 0xd2, 0xb4, 0x69, 0x80, 0xad, 0x1d, 0x94,
	0x60, 0x05, 0xf6, 0x45, 0xa0, 0xc5, 0xab, 0xcd, 0x59, 0x16, 0x35, 0x92, 0x76, 0xe2, 0xbd, 0xc9,
	0x1e, 0x60, 0xef, 0xb5, 0x8f, 0x7b, 0x8c, 0x81, 0x47, 0xc9, 0x56, 0x0a, 0x04, 0xfb, 0x66, 0xfe,
	0xfe, 0x9c, 0x78, 0xe4, 0xdd, 0xd1, 0xd0, 0xb3, 0x9a, 0x67, 0x46, 0xda, 0x61, 0xae, 0x95, 0x55,
	0x2c, 0x58, 0xf2, 0x74, 0xca, 0xd3, 0x94, 0x0f, 0xe7, 0xbf, 0xab, 0x34, 0x93, 0xfa, 0xf1, 0x3f,
	0xfb, 0xd0, 0xba, 0xf2, 0x1a, 0xf6, 0x0a, 0x9a, 0x99, 0x12, 0x68, 0xc2, 0x5a, 0xbf, 0x3e, 0xd8,
	0x79, 0xf9, 0xcd, 0xf0, 0x4b, 0xf5, 0xb0, 0x50, 0x0e, 0x3f, 0x28, 0x81, 0x91, 0x17, 0xb3, 0x13,
	0x00, 0x63, 0x55, 0x1e, 0xe7, 0x5c, 0x6a, 0x13, 0x6e, 0x91, 0xf5, 0xf1, 0xdd, 0xd6, 0x4b, 0xab,
	0xf2, 0x5f, 0xb8, 0xd4, 0x51, 0xc7, 0x14, 0xbf, 0x0c, 0xfb, 0x01, 0xb6, 0xb5, 0x5a, 0x58, 0x34,
	0x61, 0x9d, 0xec, 0x8f, 0xee, 0xb6, 0x47, 0x4e, 0x17, 0x15, 0x72, 0x67, 0x34, 0x53, 0x9e, 0xa3,
	0x09, 0x1b, 0xff, 0x67, 0xbc, 0x74, 0xba, 0xa8, 0x90, 0x1f, 0xff, 0xbb, 0x05, 0x0d, 0x97, 0x04,
	0x0b, 0xa0, 0x9e, 0xaa, 0x2c, 0xac, 0xf5, 0x6b, 0x83, 0xad, 0xc8, 0xfd, 0x24, 0x84, 0xdb, 0x70,
	0xab, 0x40, 0xb8, 0x65, 0x0c, 0x1a, 0x76, 0x95, 0x63, 0x58, 0xef, 0xd7, 0x06, 0xbd, 0x88, 0x7e,
	0xb3, 0x10, 0x5a, 0x13, 0xcd, 0xf3, 0xa9, 0x14, 0x61, 0xa3, 0x5f, 0x1b, 0x34, 0xa2, 0x72, 0xc9,
	0xbe, 0x85, 0xfd, 0x5c, 0xe3, 0x32, 0x76, 0xb2, 0xb8, 0xd4, 0x34, 0x49, 0xb3, 0xe7, 0x88, 0xab,
	0x55, 0x8e, 0xe7, 0x85, 0x96, 0x41, 0x23, 0xe3, 0x73, 0x0c, 0xb7, 0xfb, 0xb5, 0x41, 0x27, 0xa2,
	0xdf, 0xec, 0x6b, 0x00, 0x95, 0x21, 0x1d, 0xa9, 0x14, 0x61, 0x8b, 0x98, 0x4e, 0x81, 0x5c, 0x08,
	0xf6, 0x10, 0x40, 0x99, 0x79, 0x7c, 0xcd, 0x57, 0x8e, 0x6e, 0x53, 0xdc, 0xb6, 0x32, 0xf3, 0x4f,
	0x7c, 0x75, 0x21, 0xd8, 0x31, 0xb4, 0xad, 0x9c, 0xe3, 0x9f, 0x2a, 0xc3, 0xb0, 0x43, 0xd6, 0xf5,
	0x9a, 0x8d, 0xe0, 0xe0, 0x7a, 0x8a, 0x98, 0x26, 0x53, 0x2e, 0x75, 0x3c, 0x56, 0x5c, 0x0b, 0x99,
	0x4d, 0x42, 0xe8, 0xd7, 0x06, 0xed, 0x88, 0x6d, 0xa8, 0xd3, 0x82, 0x61, 0x0f, 0xa1, 0x33, 0xc1,
	0x0c, 0x35, 0xb7, 0x28, 0xc2, 0x1d, 0x92, 0x6d, 0x00, 0xf6, 0x0c, 0x76, 0xad, 0xe6, 0x4b, 0xd4,
	0x86, 0x8f, 0x65, 0x2a, 0xed, 0x2a, 0xec, 0xd2, 0xf9, 0x7c, 0x81, 0x1e, 0xff, 0xd5, 0x86, 0x76,
	0x79, 0xe9, 0xec, 0x09, 0xf4, 0xc6, 0x72, 0x86, 0x26, 0xe6, 0x69, 0xaa, 0xae, 0x51, 0xd0, 0xc1,
	0xb7, 0xa3, 0x2e, 0x81, 0x27, 0x1e, 0x63, 0x0f, 0xa0, 0x3d, 0x4e, 0x55, 0x32, 0x73, 0x09, 0x6e,
	0x51, 0xcc, 0x16, 0xad, 0x2f, 0x04, 0xfb, 0x11, 0x42, 0x81, 0xc6, 0xca, 0x8c, 0x5b, 0xa9, 0xb2,
	0x98, 0x6b, 0x2d, 0x97, 0x3c, 0x8d, 0x5d, 0x8e, 0xc5, 0xf5, 0xdc, 0xaf, 0xf0, 0x27, 0x9e, 0xbe,
	0x92, 0x73, 0xca, 0xbe, 0xea, 0xbc, 0x7d, 0x79, 0xac, 0x42, 0x95, 0x77, 0xf3, 0x0a, 0xaa, 0xa1,
	0xe2, 0xca, 0x9d, 0x34, 0xe9, 0x60, 0x0f, 0x2b, 0xec, 0xc7, 0xf5, 0xf5, 0x7c, 0x0f, 0xf7, 0x55,
	0xee, 0x4f, 0x28, 0x1e, 0xaf, 0xaa, 0x2e, 0x7f, 0xc7, 0x07, 0x25, 0x7b, 0xba, 0xda, 0x98, 0x5e,
	0xc2, 0x3d, 0xa5, 0xe5, 0x44, 0x66, 0xb1, 0xc0, 0x9c, 0x6b, 0xbb, 0xd0, 0xe8, 0x53, 0x6a, 0x51,
	0x4a, 0x07, 0x9e, 0x3c, 0x2b, 0x39, 0xca, 0xe7, 0x29, 0xec, 0x16, 0x9e, 0x32, 0x15, 0x5f, 0x0b,
	0x3d, 0x8f, 0x9e, 0x6f, 0xaa, 0xb1, 0x90, 0x55, 0xb6, 0xe2, 0x2b, 0x63, 0xcf, 0x13, 0x9b, 0x6d,
	0x3c, 0x82, 0x1d, 0xea, 0xab, 0x58, 0x66, 0x02, 0x6f, 0xa8, 0x30, 0x7a, 0x11, 0x10, 0x74, 0xe1,
	0x10, 0x36, 0x84, 0x03, 0x83, 0x7a, 0x29, 0x13, 0x8c, 0xb9, 0x10, 0x28, 0x62, 0xc1, 0x5d, 0xd3,
	0xee, 0xf4, 0xeb, 0x83, 0x5e, 0xb4, 0x5f, 0x50, 0x27, 0x8e, 0x39, 0x73, 0x04, 0x1b, 0xc1, 0x61,
	0xa9, 0x17, 0x7c, 0x65, 0x62, 0xf5, 0x39, 0xbe, 0x46, 0x9c, 0x85, 0xdd, 0x7e, 0x7d, 0xd0, 0x5e,
	0x1b, 0xce, 0xf8, 0xca, 0x7c, 0xfc, 0xfc, 0x09, 0x71, 0xc6, 0x06, 0x10, 0x94, 0x06, 0xcc, 0x7c,
	0xf8, 0xb0, 0xe7, 0xab, 0xaa, 0xc0, 0xdf, 0x66, 0x14, 0x9b, 0x7d, 0xb7, 0x09, 0x8d, 0x37, 0x09,
	0xe6, 0xb6, 0xd8, 0xcb, 0x2e, 0xed, 0x85, 0x95, 0x6a, 0xa2, 0xfc, 0x66, 0x9e, 0x43, 0x89, 0xc6,
	0xc6, 0x72, 0xed, 0x0d, 0xe1, 0x1e, 0x45, 0x2f, 0xbf, 0x7a, 0xe9, 0x08, 0x8a, 0xff, 0xc4, 0x8d,
	0x4e, 0x99, 0xc7, 0x53, 0xe4, 0xc2, 0xc8, 0x49, 0x16, 0x06, 0x74, 0x66, 0x5d, 0x07, 0xbe, 0x2f,
	0x30, 0x76, 0x04, 0x2d, 0x12, 0x49, 0x11, 0xee, 0x53, 0x9c, 0x6d, 0xb7, 0xa4, 0x2a, 0xb8, 0x57,
	0x69, 0x35, 0x9e, 0x24, 0x68, 0x8c, 0x1c, 0xa7, 0x18, 0x32, 0x2a, 0xf7, 0xc3, 0x0d, 0x79, 0xb2,
	0xe6, 0x5c, 0xd9, 0xd3, 0x74, 0x72, 0xe1, 0x0e, 0x7d, 0xd9, 0xd3, 0xfa, 0x42, 0xb8, 0x6c, 0xcb,
	0x02, 0x91, 0xc6, 0xc6, 0xd4, 0x61, 0x29, 0x8a, 0xf0, 0x1e, 0x0d, 0x29, 0x56, 0xd4, 0x87, 0x34,
	0xf6, 0xaa, 0x60, 0xd8, 0x6b, 0x78, 0x50, 0xad, 0xde, 0xdb, 0xb6, 0xfb, 0x64, 0x3b, 0xaa, 0x08,
	0x6e, 0x79, 0x9f, 0x03, 0xfb, 0xac, 0xf1, 0x8f, 0x05, 0x66, 0xc9, 0x8a, 0xee, 0x81, 0x6a, 0xf1,
	0xc8, 0x9f, 0xd4, 0x9a, 0x79, 0x9b, 0x09, 0x2a, 0xc4, 0xd7, 0xf0, 0x60, 0xa3, 0x76, 0xc7, 0xe5,
	0x46, 0x93, 0xc1, 0x44, 0x65, 0xc2, 0x84, 0x21, 0x99, 0x8e, 0xd6, 0x82, 0xf7, 0x9e, 0xbf, 0xf4,
	0xf4, 0xf1, 0xdf, 0x75, 0x68, 0xd2, 0x44, 0x5f, 0x4f, 0xc2, 0xda, 0x9d, 0x93, 0x70, 0xeb, 0xcb,
	0x49, 0x38, 0x80, 0xa0, 0xda, 0x6a, 0x64, 0xaf, 0x93, 0x68, 0x77, 0xd3, 0x64, 0x1f, 0x5c, 0xa0,
	0xbb, 0x9b, 0xb2, 0x71, 0x77, 0x53, 0x0e, 0xe1, 0xa0, 0x6a, 0xba, 0xc6, 0xb1, 0x91, 0x16, 0x8b,
	0xe6, 0xdf, 0xdf, 0x38, 0x3e, 0x79, 0x62, 0xd3, 0x3d, 0x89, 0x4a, 0x95, 0xa6, 0x76, 0x2f, 0xbb,
	0xe7, 0x8d, 0x43, 0x5c, 0x3a, 0x5e, 0x20, 0xd0, 0x24, 0xe5, 0x60, 0x27, 0xe4, 0x0c, 0x4d, 0xc2,
	0x9e, 0xc1, 0x9e, 0xa7, 0x53, 0x95, 0x4d, 0x7c, 0x36, 0x6d, 0xd2, 0xf4, 0x08, 0xfe, 0x49, 0x65,
	0x13, 0x4a, 0x66, 0x00, 0x81, 0xd7, 0x59, 0xbc, 0xb1, 0xc5, 0xc7, 0x3a, 0xbe, 0x47, 0x08, 0xbf,
	0xc2, 0x1b, 0xeb, 0x3f, 0xf8, 0x1e, 0xba, 0x4b, 0x9c, 0xca, 0x24, 0x45, 0x7a, 0x8c, 0xa8, 0xa1,
	0x77, 0x5f, 0x3e, 0xbd, 0xfb, 0x8d, 0xfc, 0xd5, 0xab, 0xdd, 0x0b, 0x15, 0xed, 0x2c, 0x37, 0x8b,
	0xe3, 0x73, 0x68, 0xd2, 0xfb, 0x79, 0xab, 0x46, 0x6b, 0xb7, 0x6b, 0xf4, 0x09, 0xf4, 0x30, 0x4b,
	0x94, 0x1b, 0x0b, 0x04, 0xd1, 0x85, 0x75, 0xa3, 0x6e, 0x01, 0x92, 0xff, 0xb1, 0x86, 0x9d, 0xca,
	0x47, 0x58, 0x07, 0x9a, 0xb3, 0x2b, 0xcd, 0xe7, 0xc1, 0x57, 0x0c, 0x60, 0x7b, 0xf6, 0x33, 0x5a,
	0xad, 0x82, 0x1a, 0xc1, 0x11, 0x97, 0x69, 0xb0, 0xc5, 0xda, 0xd0, 0x98, 0x9d, 0x2e, 0x4c, 0x50,
	0x27, 0xc1, 0x3b, 0xd4, 0x7a, 0x15, 0x34, 0x58, 0x0f, 0x3a, 0xb3, 0x37, 0x7c, 0x9c, 0xe2, 0x1b,
	0xae, 0x83, 0x26, 0xeb, 0x42, 0x7b, 0x76, 0xae, 0x32, 0xa1, 0x52, 0x1e, 0x6c, 0xb3, 0x5d, 0x80,
	0xd9, 0xbb, 0x45, 0x26, 0x93, 0x45, 0xca, 0x75, 0xd0, 0x3a, 0x1d, 0xfd, 0xf6, 0x62, 0x22, 0xed,
	0x74, 0x31, 0x1e, 0x26, 0x6a, 0x3e, 0x5a, 0x64, 0xd2, 0xa2, 0x78, 0x21, 0xb4, 0x74, 0x8f, 0xd4,
	0xa8, 0x3c, 0x8b, 0x51, 0x3e, 0x1e, 0x15, 0xff, 0x95, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xae,
	0x2c, 0x72, 0x09, 0x35, 0x09, 0x00, 0x00,
}
