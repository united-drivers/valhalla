// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fileformat.proto

/*
Package OSMPBF is a generated protocol buffer package.

It is generated from these files:
	fileformat.proto

It has these top-level messages:
	Blob
	BlobHeader
*/
package OSMPBF

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Blob struct {
	Raw     []byte `protobuf:"bytes,1,opt,name=raw" json:"raw,omitempty"`
	RawSize *int32 `protobuf:"varint,2,opt,name=raw_size,json=rawSize" json:"raw_size,omitempty"`
	// Possible compressed versions of the data.
	ZlibData []byte `protobuf:"bytes,3,opt,name=zlib_data,json=zlibData" json:"zlib_data,omitempty"`
	// PROPOSED feature for LZMA compressed data. SUPPORT IS NOT REQUIRED.
	LzmaData []byte `protobuf:"bytes,4,opt,name=lzma_data,json=lzmaData" json:"lzma_data,omitempty"`
	// Formerly used for bzip2 compressed data. Depreciated in 2010.
	OBSOLETEBzip2Data []byte `protobuf:"bytes,5,opt,name=OBSOLETE_bzip2_data,json=OBSOLETEBzip2Data" json:"OBSOLETE_bzip2_data,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *Blob) Reset()                    { *m = Blob{} }
func (m *Blob) String() string            { return proto.CompactTextString(m) }
func (*Blob) ProtoMessage()               {}
func (*Blob) Descriptor() ([]byte, []int) { return fileDescriptorFileformat, []int{0} }

func (m *Blob) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *Blob) GetRawSize() int32 {
	if m != nil && m.RawSize != nil {
		return *m.RawSize
	}
	return 0
}

func (m *Blob) GetZlibData() []byte {
	if m != nil {
		return m.ZlibData
	}
	return nil
}

func (m *Blob) GetLzmaData() []byte {
	if m != nil {
		return m.LzmaData
	}
	return nil
}

func (m *Blob) GetOBSOLETEBzip2Data() []byte {
	if m != nil {
		return m.OBSOLETEBzip2Data
	}
	return nil
}

type BlobHeader struct {
	Type             *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Indexdata        []byte  `protobuf:"bytes,2,opt,name=indexdata" json:"indexdata,omitempty"`
	Datasize         *int32  `protobuf:"varint,3,req,name=datasize" json:"datasize,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BlobHeader) Reset()                    { *m = BlobHeader{} }
func (m *BlobHeader) String() string            { return proto.CompactTextString(m) }
func (*BlobHeader) ProtoMessage()               {}
func (*BlobHeader) Descriptor() ([]byte, []int) { return fileDescriptorFileformat, []int{1} }

func (m *BlobHeader) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *BlobHeader) GetIndexdata() []byte {
	if m != nil {
		return m.Indexdata
	}
	return nil
}

func (m *BlobHeader) GetDatasize() int32 {
	if m != nil && m.Datasize != nil {
		return *m.Datasize
	}
	return 0
}

func init() {
	proto.RegisterType((*Blob)(nil), "OSMPBF.Blob")
	proto.RegisterType((*BlobHeader)(nil), "OSMPBF.BlobHeader")
}

func init() { proto.RegisterFile("fileformat.proto", fileDescriptorFileformat) }

var fileDescriptorFileformat = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0xbd, 0x6a, 0xfb, 0x30,
	0x14, 0xc5, 0x91, 0x3f, 0xfe, 0x7f, 0xfb, 0xd2, 0x42, 0xa2, 0x2e, 0xea, 0xc7, 0x60, 0x32, 0x79,
	0xca, 0x90, 0x47, 0x10, 0x4d, 0xc9, 0xd0, 0xe2, 0x22, 0x77, 0xea, 0x62, 0xae, 0x6a, 0x05, 0x04,
	0x4e, 0x64, 0x14, 0x81, 0x6b, 0xbd, 0x4d, 0xdf, 0xb4, 0x48, 0xa6, 0xed, 0xa4, 0xa3, 0xf3, 0x3b,
	0x47, 0xba, 0x17, 0x56, 0x47, 0x3d, 0xa8, 0xa3, 0xb1, 0x27, 0x74, 0xdb, 0xd1, 0x1a, 0x67, 0xe8,
	0xbf, 0xa6, 0x7d, 0x79, 0xe5, 0x4f, 0x9b, 0x2f, 0x02, 0x19, 0x1f, 0x8c, 0xa4, 0x2b, 0x48, 0x2d,
	0x4e, 0x8c, 0x54, 0xa4, 0xbe, 0x12, 0x41, 0xd2, 0x5b, 0x28, 0x2c, 0x4e, 0xdd, 0x45, 0x7b, 0xc5,
	0x92, 0x8a, 0xd4, 0xb9, 0xf8, 0x6f, 0x71, 0x6a, 0xb5, 0x57, 0xf4, 0x1e, 0x4a, 0x3f, 0x68, 0xd9,
	0xf5, 0xe8, 0x90, 0xa5, 0xb1, 0x52, 0x04, 0xe3, 0x11, 0x1d, 0x06, 0x38, 0xf8, 0x13, 0x2e, 0x30,
	0x5b, 0x60, 0x30, 0x22, 0xdc, 0xc1, 0x4d, 0xc3, 0xdb, 0xe6, 0x79, 0xff, 0xb6, 0xef, 0xa4, 0xd7,
	0xe3, 0x6e, 0x89, 0xe5, 0x21, 0xc6, 0x13, 0x46, 0xc4, 0xfa, 0x07, 0xf3, 0x40, 0x43, 0x67, 0xf3,
	0x0e, 0x10, 0x46, 0x3c, 0x28, 0xec, 0x95, 0xa5, 0x14, 0x32, 0x37, 0x8f, 0x8a, 0x91, 0x2a, 0xa9,
	0x4b, 0x11, 0x35, 0x7d, 0x80, 0x52, 0x9f, 0x7b, 0xf5, 0x19, 0xdf, 0x4a, 0xe2, 0x97, 0x7f, 0x06,
	0xbd, 0x83, 0x22, 0x9c, 0x71, 0x91, 0xb4, 0x4a, 0xea, 0x5c, 0xfc, 0xde, 0xf9, 0x1a, 0xae, 0x3f,
	0xac, 0xb9, 0xc8, 0x79, 0x2b, 0xf5, 0x19, 0xed, 0x7c, 0x48, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xf5, 0x26, 0x8b, 0x7a, 0x2d, 0x01, 0x00, 0x00,
}
